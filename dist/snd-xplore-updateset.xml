<?xml version="1.0" encoding="UTF-8"?>
<unload unload_date="2016-05-03 18:11:29">
<sys_remote_update_set action="INSERT_OR_UPDATE">
<application display_value="Global">global</application>
<application_name>Global</application_name>
<application_scope>global</application_scope>
<application_version/>
<collisions/>
<commit_date/>
<deleted/>
<description># Xplore: Developer Toolkit
A toolkit for every ServiceNow developer.
Created by @James_Neale &lt;james@sndeveloper.com&gt;

### Version 3.6 (G3.0.4)
- Feature: Output wrapping controlled by setting. Defaulted to wrap.
- Feature: New side pane: Script Include importer.
- UI: Improved Settings pane.
- UI: Made setting panes overlay script editor instead of shrink it.
- UI: Updated Share link so it doesn't point to an old version.
- UI: Added additional Table Hierarchy link.
- Fix: Set default wrapping for long text to match the checkbox setting.
- Fix: user_data object now works in scoped scripts on the source instance.
- Tested in Helsinki.</description>
<inserted/>
<name>Xplore - 3.6</name>
<origin_sys_id/>
<release_date/>
<remote_sys_id>7016fc670f4b1a0094f3c09ce1050e39</remote_sys_id>
<state>loaded</state>
<summary/>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>836cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<update_set display_value=""/>
<update_source display_value=""/>
<updated/>
</sys_remote_update_set>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_e9a20c7e0f54564094f3c09ce1050eb4</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script"><sys_ui_script action="INSERT_OR_UPDATE"><active>true</active><description>Inject the glasses icon into the UI.&#13;
Tested in Fuji and Geneva.</description><global>true</global><name>snd_xplore_glasses</name><script>function snd_xplore_glasses () {&#13;
  if (typeof jQuery === 'function' &amp;&amp; typeof top.$j === 'function') {&#13;
    jQuery(document).ready(function () {&#13;
      var top = window.top;&#13;
&#13;
      if (typeof top.snd_xplore_loaded != 'undefined') {&#13;
        return;&#13;
      }&#13;
      top.snd_xplore_loaded = true;&#13;
&#13;
      var hasAdmin = (function () {&#13;
        try {&#13;
          var roles;&#13;
          if (typeof top.NOW == 'object') {&#13;
            roles = top.NOW.user.roles.split(',');&#13;
          } else if (typeof window.g_user == 'object' &amp;&amp; window.g_user.roles) {&#13;
            roles = window.g_user.roles;&#13;
          }&#13;
          if (!roles) return false;&#13;
          for (var i = roles.length - 1; i &gt; -1; i--) {&#13;
            if (roles[i] == 'admin') return true;&#13;
          }&#13;
        } catch (e) {&#13;
          jslog('Error with snd_xplore_glasses script finding user roles: ' + e);&#13;
        }&#13;
        return false;&#13;
      })();&#13;
&#13;
      var isUI16 = top.$j('.navpage-header-content').length &gt; 0;&#13;
&#13;
      var title = "Xplore: the professional ServiceNow developer toolkit.";&#13;
&#13;
      var widgetHtml;&#13;
&#13;
      if (hasAdmin) {&#13;
&#13;
        // UI16 - Geneva&#13;
        if (isUI16) {&#13;
          widgetHtml = '&lt;div class="navpage-header-content"&gt;' +&#13;
            '&lt;button data-placement="auto" class="btn btn-icon icon-glasses"' +&#13;
            ' title="' + title + '" data-original-title="Xplore" onclick="window.open(\'/snd_xplore.do\', \'_blank\');"&gt;' +&#13;
              '&lt;span class="sr-only"&gt;Xplore&lt;/span&gt;' +&#13;
            '&lt;/button&gt;&lt;/div&gt;';&#13;
          top.$j('#sysparm_search').parents('div.navpage-header-content').first().after(widgetHtml);&#13;
        }&#13;
&#13;
        // UI15 - Fuji&#13;
        else {&#13;
          widgetHtml = '&lt;span id="snd_xplore_span" ' +&#13;
            'style="visibility: visible; display: inline-block; zoom: 1; vertical-align: middle;"&gt;' +&#13;
              '&lt;span tabindex="0" onclick="window.open(\'/snd_xplore.do\', \'_blank\');"' +&#13;
              ' class="icon-glasses sn-tooltip-basic"' +&#13;
              ' style="cursor: pointer; font-size: 20px; border: 0;"' +&#13;
              ' title="' + title + '"&gt;&lt;span class="sr-only"&gt;' + title +&#13;
              '&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;';&#13;
          top.$j('#nav_header_stripe_decorations_left').append(widgetHtml);&#13;
        }&#13;
&#13;
      }&#13;
    });&#13;
  }&#13;
}&#13;
snd_xplore_glasses();</script><script_name/><sys_class_name>sys_ui_script</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-12-16 13:13:07</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>e9a20c7e0f54564094f3c09ce1050eb4</sys_id><sys_mod_count>9</sys_mod_count><sys_name>snd_xplore_glasses</sys_name><sys_package display_value="Xplore" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_ui_script_e9a20c7e0f54564094f3c09ce1050eb4</sys_update_name><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2016-02-07 20:46:53</sys_updated_on><use_scoped_format>false</use_scoped_format></sys_ui_script></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>036cf8e70f4b1a0094f3c09ce1050e15</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore_glasses</target_name>
<type>UI Script</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_0f6ab99a0f36060094f3c09ce1050ee8</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_app"><sys_app action="INSERT_OR_UPDATE"><active>true</active><licensable>true</licensable><logo/><menu display_value="Xplore">4eb000280f2a020094f3c09ce1050e23</menu><name>Xplore</name><scope>global</scope><short_description># Xplore: Developer Toolkit A toolkit for every ServiceNow developer. Created by @James_Neale &lt;james@sndeveloper.com&gt;</short_description><source>0f6ab99a0f36060094f3c09ce1050ee8</source><store_correlation_id/><store_url/><sys_class_name>sys_app</sys_class_name><sys_code/><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-10-01 19:03:06</sys_created_on><sys_id>0f6ab99a0f36060094f3c09ce1050ee8</sys_id><sys_mod_count>16</sys_mod_count><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2016-05-03 12:31:44</sys_updated_on><template/><user_role display_value="admin" name="admin">2831a114c611228501d4ea6c309d626d</user_role><vendor/><vendor_prefix/><version>3.6</version></sys_app></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>076cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>Xplore</target_name>
<type>Custom Application</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_properties_7ab919cb0fee420094f3c09ce1050e41</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_properties"><sys_properties action="INSERT_OR_UPDATE"><choices/><description>Log server side scripts that are run using /snd_xplore.do much the same that background scripts do.</description><ignore_cache>false</ignore_cache><is_private>false</is_private><name>snd_xplore.log_request</name><read_roles/><suffix/><sys_class_name>sys_properties</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-09-21 14:21:13</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>7ab919cb0fee420094f3c09ce1050e41</sys_id><sys_mod_count>4</sys_mod_count><sys_name>snd_xplore.log_request</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_properties_7ab919cb0fee420094f3c09ce1050e41</sys_update_name><sys_updated_by>james@snd</sys_updated_by><sys_updated_on>2015-10-01 19:06:44</sys_updated_on><type>boolean</type><value>true</value><write_roles/></sys_properties><sys_translated_text action="delete_multiple" query="documentkey=7ab919cb0fee420094f3c09ce1050e41"/></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>0b6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore.log_request</target_name>
<type>System Property</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_macro_e768ef690f4c524094f3c09ce1050e60</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_macro"&gt;&lt;sys_ui_macro action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;category&gt;general&lt;/category&gt;&lt;description/&gt;&lt;media_type/&gt;&lt;name&gt;snd_xplore_main&lt;/name&gt;&lt;scoped_name/&gt;&lt;sys_class_name&gt;sys_ui_macro&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@snd&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-11-30 22:27:04&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;e768ef690f4c524094f3c09ce1050e60&lt;/sys_id&gt;&lt;sys_mod_count&gt;243&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_main&lt;/sys_name&gt;&lt;sys_package display_value="Xplore" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Xplore"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_macro_e768ef690f4c524094f3c09ce1050e60&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@sndeveloper.com&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2016-05-03 17:17:31&lt;/sys_updated_on&gt;&lt;xml&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;
&lt;html lang="en"&gt;
  &lt;head&gt;
    &lt;meta charset="utf-8" /&gt;
    &lt;meta http-equiv="X-UA-Compatible" content="IE=edge" /&gt;
    &lt;meta name="viewport" content="width=device-width, initial-scale=1" /&gt;

    &lt;title&gt;Xplore&lt;/title&gt;

    &lt;!-- Bootstrap --&gt;
    &lt;link rel="stylesheet" href="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/css/bootstrap.min.css" /&gt;

    &lt;!-- Bootstrap Toggle --&gt;
    &lt;link href="https://gitcdn.github.io/bootstrap-toggle/2.2.0/css/bootstrap-toggle.min.css" rel="stylesheet" /&gt;

    &lt;!-- HTML5 shim and Respond.js for IE8 support of HTML5 elements and media queries --&gt;
    &lt;!-- WARNING: Respond.js doesnt work if you view the page via file:// --&gt;
    &lt;!--[if lt IE 9]&gt;
      &lt;script src="https://oss.maxcdn.com/html5shiv/3.7.2/html5shiv.min.js"&gt;&lt;/script&gt;
      &lt;script src="https://oss.maxcdn.com/respond/1.4.2/respond.min.js"&gt;&lt;/script&gt;
    &lt;![endif]--&gt;

    &lt;!-- CodeMirror --&gt;
    &lt;link rel="stylesheet" href="/codemirror.css" /&gt;

    &lt;!-- snd_xplore --&gt;
    &lt;link href="/efd550a80f2a020094f3c09ce1050ecf.cssdbx" rel="stylesheet" /&gt;
  &lt;/head&gt;
  &lt;body&gt;

    &lt;div id="window_loader" class="page_loader active"&gt;
      &lt;div class="loading"&gt;
        &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;nav class="navbar navbar-default navbar-fixed-top"&gt;
      &lt;div class="navbar-header"&gt;
        &lt;a href="#" class="navbar-brand"&gt;Xplore&lt;/a&gt;&lt;/div&gt;
      &lt;div id="navbar"&gt;
        &lt;ul class="nav navbar-nav"&gt;
          &lt;li&gt;
            &lt;p class="navbar-control"&gt;
              &lt;select id="target" class="form-control"&gt;
                &lt;option value="server"&gt;Server&lt;/option&gt;
                &lt;option value="client"&gt;Client&lt;/option&gt;
              &lt;/select&gt;
            &lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;p class="navbar-control"&gt;
              &lt;select id="scope" class="form-control"&gt;
                &lt;option&gt;Loading&lt;/option&gt;
              &lt;/select&gt;
            &lt;/p&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;button id="xplore_btn" class="btn btn-success navbar-control"
              title="Ctrl + Enter"&gt;Run&lt;/button&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;button id="cancel_btn" class="btn btn-danger navbar-control"
              title="Cancel Transaction" style="display:none"&gt;Cancel&lt;/button&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;
    &lt;/nav&gt;

    &lt;div id="wrapper"&gt;

      &lt;div id="side_controls"&gt;
        &lt;ul&gt;
          &lt;li&gt;
            &lt;a href="javascript:void(0);" title="New"
              onclick="window.opener ? window.opener.open(window.location.href, '_blank') : window.open(window.location.href, '_blank');"&gt;
              &lt;i class="glyphicon glyphicon-new-window"&gt;&lt;/i&gt;
            &lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="javascript:void(0)" title="Toggle Editor" id="editor_toggle" class="active"&gt;
            &lt;i class="glyphicon glyphicon-console"&gt;&lt;/i&gt;&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;&lt;a href="javascript:void(0);" title="Settings" data-pane="settings_pane"&gt;
            &lt;i class="glyphicon glyphicon-cog"&gt;&lt;/i&gt;&lt;/a&gt;
          &lt;/li&gt;
          &lt;li&gt;
            &lt;a href="javascript:void(0)" title="Open Script" data-pane="script_pane"&gt;
              &lt;i class="glyphicon glyphicon-paste"&gt;&lt;/i&gt;&lt;/a&gt;
          &lt;/li&gt;
        &lt;/ul&gt;
      &lt;/div&gt;

      &lt;div id="settings_pane" class="side_pane" style="display: none;"&gt;
        &lt;p class="lead"&gt;Settings&lt;/p&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="show_props" checked="checked" /&gt;
          &lt;strong&gt;Show Object Properties*&lt;/strong&gt;
          &lt;p&gt;Xplore will display the properties of the resulting objects of
            any script you run. Turn off if you only care about the object
            itself.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="show_strings" checked="checked" /&gt;
          &lt;strong&gt;Show String Values*&lt;/strong&gt;
          &lt;p&gt;Xplore will attempt to display the string values of the object and
            its properties. Turn off if you encounter access errors or you don't
            want to see strings. When off, all string values are shown as
            &amp;quot;&lt;span class="text-danger"&gt;[user ignored]&lt;/span&gt;&amp;quot;.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="show_html_messages" checked="checked" /&gt;
          &lt;strong&gt;HTML Message Format*&lt;/strong&gt;
          &lt;p&gt;Output messages are shown as they are generated which means if they
            contain something like an anchor tag the anchor will work. Turn off
            if you want to see the raw string.&lt;/p&gt;
        &lt;/div&gt;
        &lt;div class="checkbox"&gt;
          &lt;input type="checkbox" id="wrap_output_pre" checked="checked" /&gt;
          &lt;strong&gt;Wrap Long Strings&lt;/strong&gt;
          &lt;p&gt;Wrapping of long strings, i.e. functions, means you don't have to
            scroll right in the output pane to read them. If you'd rather see
            each line as-is then change this setting.&lt;/p&gt;
        &lt;/div&gt;
        &lt;p class="small"&gt;*New values will apply to the next script being run.&lt;/p&gt;
      &lt;/div&gt;

      &lt;div id="script_pane" class="side_pane" style="display: none;"&gt;
        &lt;div id="script_pane_loading" class="pull-right" style="display:none;"&gt;
          &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
        &lt;/div&gt;
        &lt;p class="lead"&gt;Scripts&lt;/p&gt;
        &lt;p&gt;Easily append script includes to the editor window.&lt;/p&gt;
        &lt;input type="text" class="form-control" id="script_pane_search"
          placeholder="Search..." /&gt;

        &lt;p class="alert alert-warning" id="script_pane_404" style="display: none"&gt;
          Nothing found.
        &lt;/p&gt;
        &lt;ul id="script_pane_list"&gt;&lt;/ul&gt;
      &lt;/div&gt;

      &lt;div id="workbench"&gt;

        &lt;div id="editor"&gt;
          &lt;textarea class="form-control" id="snd_xplore" rows="10"&gt;&lt;/textarea&gt;
          &lt;div class="ui-resizable-handle ui-resizable-e"&gt;&lt;/div&gt;
        &lt;/div&gt;

        &lt;div id="output"&gt;

          &lt;div id="output_loader" class="page_loader"&gt;
            &lt;div class="loading"&gt;
              &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
              &lt;div id="countup"&gt;&lt;/div&gt;
            &lt;/div&gt;
          &lt;/div&gt;

          &lt;div id="output_content"&gt;

            &lt;ul class="nav nav-tabs" role="tablist" id="output_tabs"&gt;
              &lt;li role="presentation" class="active"&gt;
                &lt;a href="#info_pane" aria-controls="info_pane" id="info_pane_tab"
                  role="tab" data-toggle="tab"
                  title="Some stuff about Xplore"&gt;
                  &lt;i class="glyphicon glyphicon-info-sign"&gt;&lt;/i&gt;
                &lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#script_output" aria-controls="script_output"
                  id="script_output_tab" role="tab" data-toggle="tab"
                  title="View the output of your script"&gt;Output&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#user_data_pane" aria-controls="user_data_pane"
                  id="user_data_tab" role="tab" data-toggle="tab"
                  title="Test your code with large strings"&gt;User Data&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#regex_pane" aria-controls="regex_pane" role="tab"
                  data-toggle="tab"
                  title="Run regular expressions in ServiceNow"&gt;Regex&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#table_hierarchy_pane" aria-controls="table_hierarchy_pane"
                  role="tab" data-toggle="tab"
                  title="View the hierarchy of a table"&gt;Table Hierarchy&lt;/a&gt;
              &lt;/li&gt;
              &lt;li role="presentation"&gt;
                &lt;a href="#system_log_pane" aria-controls="system_log_pane"
                  id="system_log_tab" role="tab" data-toggle="tab"
                  title="System Logs - double click to reload"&gt;Logs&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;

            &lt;div class="tab-content" id="output_tabs_pane"&gt;

              &lt;div id="info_pane" role="tabpanel" class="tab-pane fade active in"&gt;
                &lt;g:macro_invoke macro="snd_xplore_info" /&gt;
              &lt;/div&gt;

              &lt;div id="script_output" role="tabpanel" class="tab-pane fade monospace"&gt;
                &lt;ul id="breadcrumb" class="breadcrumb hidden"&gt;
                  &lt;li class="permanent"&gt;
                    &lt;a id="clearBreadcrumb" href="javascript:void(0);"&gt;Result&lt;/a&gt;
                  &lt;/li&gt;
                &lt;/ul&gt;

                &lt;div id="message_container"&gt;
                  &lt;table class="table table-condensed" id="message_table"&gt;
                    &lt;tr&gt;
                      &lt;td&gt;
                        &lt;div class="alert alert-success"
                            style="width: 70%; margin: 40px auto;"&gt;
                          Output will be displayed here when you run a script.
                        &lt;/div&gt;
                      &lt;/td&gt;
                    &lt;/tr&gt;
                  &lt;/table&gt;
                &lt;/div&gt;

                &lt;div id="log_container" class="hidden"&gt;
                  &lt;h4 class="monospace"&gt;System Logs&lt;/h4&gt;
                  &lt;table class="table table-condensed" id="log_table"&gt;&lt;/table&gt;
                &lt;/div&gt;

                &lt;div id="result_container"&gt;
                  &lt;table class="table table-condensed" id="description_table"&gt;&lt;/table&gt;

                  &lt;div id="type_control"&gt;&lt;/div&gt;
                  &lt;table class="table table-condensed" id="results_table"&gt;&lt;/table&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div id="user_data_pane" role="tabpanel" class="tab-pane fade"&gt;

                &lt;div class="wrap row"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;h4 class="monospace"&gt;User Data&lt;/h4&gt;
                    &lt;p&gt;Easily add large strings to the variable &lt;code&gt;user_data&lt;/code&gt;.&lt;/p&gt;
                    &lt;textarea id="user_data_input" class="form-control monospace"&gt;
                    &lt;/textarea&gt;
                  &lt;/div&gt;
                &lt;/div&gt;

              &lt;/div&gt;

              &lt;div id="regex_pane" role="tabpanel" class="tab-pane fade monospace"&gt;

                &lt;div class="wrap row"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;div id="regex_loading" class="pull-right" style="display:none;"&gt;
                      &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
                    &lt;/div&gt;
                    &lt;h4&gt;Regular Expression&lt;/h4&gt;
                    &lt;div&gt;
                      &lt;div class="slash"&gt;/&lt;/div&gt;
                      &lt;div class="regex-options"&gt;
                        &lt;div class="slash"&gt;/&lt;/div&gt;
                        &lt;input type="text" value="g" id="regex_options" name="regex_options"
                            class="form-control" tabindex="2" /&gt;
                      &lt;/div&gt;
                      &lt;div class="regex-expression"&gt;
                        &lt;input type="text" placeholder="expression" id="regex" name="regex"
                            class="form-control" tabindex="1" /&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="col-sm-6 col-xs-12"&gt;
                    &lt;h4&gt;Test String&lt;/h4&gt;
                    &lt;div class="panel panel-default"&gt;
                      &lt;textarea id="regex_input" style="width: 100%" rows="10"
                          tabindex="3"&gt;&lt;/textarea&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div class="col-sm-6 col-xs-12"&gt;
                    &lt;h4&gt;Test Output&lt;/h4&gt;
                    &lt;div id="regex_intro_panel" class="panel panel-default"&gt;
                      &lt;div class="panel-body"&gt;
                        &lt;p&gt;Use this editor to test regular expressions as you write them,
                          both in the client and as they would run in ServiceNow.&lt;/p&gt;
                        &lt;p&gt;The expression will be automatically evaluated on whichever
                          target you have selected (client or server*) and the result shown here.&lt;/p&gt;
                        &lt;p&gt;&lt;small&gt;*Global scope is always used when evaluating on the
                          server.&lt;/small&gt;&lt;/p&gt;
                      &lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id="regex_match_panel" class="panel panel-success" style="display: none"&gt;
                      &lt;div class="panel-heading"&gt;
                        &lt;h3 class="panel-title"&gt;Match&lt;/h3&gt;
                      &lt;/div&gt;
                      &lt;div class="panel-body" id="regex_match"&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id="regex_group_panel" class="panel panel-success" style="display: none"&gt;
                      &lt;div class="panel-heading"&gt;
                        &lt;h3 class="panel-title"&gt;Match groups&lt;/h3&gt;
                      &lt;/div&gt;
                      &lt;div class="panel-body" id="regex_group"&gt;&lt;/div&gt;
                    &lt;/div&gt;
                    &lt;div id="regex_error_panel" class="alert alert-danger" style="display: none"&gt;
                      &lt;strong id="regex_error"&gt;&lt;/strong&gt;
                    &lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
                &lt;div id="regex_help"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;h4&gt;Words and Ranges&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;play&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Match the word 'play'&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;1337&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Match the number '1337'&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[TF2]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A single character of T, F or 2&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[^xyz]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character except x, y or z&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-z]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character in the lowercase range a-z&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-zA-Z]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character in ranges a-z or A-Z&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;[a-zA-Z0-9]&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any alphanumeric character&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Classes&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;.&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any single character&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\d&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A single digit&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\D&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A single non-digit&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\s&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any whitespace character&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\S&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any non-whitespace character&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\w&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any word character (alphanumeric or underscore)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\W&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Any non-word character&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Quantifiers&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;d?&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Zero or one of d&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;o*&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Zero or more of o&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;o+&lt;/code&gt;&lt;/td&gt;&lt;td&gt;One or more of o&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;m{4}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Exactly 4 of m&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;H{2,}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;2 or more of H&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;L{1,3}&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Between 1 and 3 of L&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Anchors&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;^&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Line start (works with multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;$&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Line end (works with multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\A&lt;/code&gt;&lt;/td&gt;&lt;td&gt;String start (ignore multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\Z&lt;/code&gt;&lt;/td&gt;&lt;td&gt;String end (ignore multiline)&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\b&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A word boundary&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\B&lt;/code&gt;&lt;/td&gt;&lt;td&gt;A non-word boundary&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Alternation and Groups&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;dead|alive&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Match 'dead' or 'alive'&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;(flag)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Capture a group containing 'flag'.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;(?!flag)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Non-capturing group.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;\2&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Reference the second captured group.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;123(?=4)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Positive lookahead. Ensure 123 is followed by 4.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;123(?!5)&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Negative lookahead. Ensure 123 is not followed by 5.&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                    &lt;h4&gt;Options&lt;/h4&gt;
                    &lt;table class="table table-striped"&gt;
                      &lt;tr&gt;&lt;td style="width: 9em;"&gt;&lt;code&gt;g&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Global matching. Lookup all matches instead of just the first.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;m&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Multiline. $ and ^ will match on newlines.&lt;/td&gt;&lt;/tr&gt;
                      &lt;tr&gt;&lt;td&gt;&lt;code&gt;i&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Case insensitive matching.&lt;/td&gt;&lt;/tr&gt;
                    &lt;/table&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div id="table_hierarchy_pane" role="tabpanel" class="tab-pane fade monospace"&gt;
                &lt;div class="wrap row"&gt;
                  &lt;div class="col-xs-12"&gt;
                    &lt;div id="table_hierarchy_loading" class="pull-right" style="display:none;"&gt;
                      &lt;i class="glyphicon glyphicon-refresh spin"&gt;&lt;/i&gt;
                    &lt;/div&gt;
                    &lt;h4&gt;Table Hierarchy&lt;/h4&gt;
                    &lt;div class="panel-body"&gt;
                      &lt;p&gt;Type in a table name to see all the tables in its hierarchy.&lt;/p&gt;
                      &lt;p&gt;Hit &lt;kbd&gt;Enter&lt;/kbd&gt; to run.&lt;/p&gt;

                      &lt;table class="table table-condensed"&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;incident&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all tables with names starting with 'incident'&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;*incident&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Find all tables with names containing 'incident'&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;=incident&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Show only the 'incident' table&lt;/td&gt;&lt;/tr&gt;
                        &lt;tr&gt;&lt;td&gt;&lt;code&gt;*&lt;/code&gt;&lt;/td&gt;&lt;td&gt;Show all tables&lt;/td&gt;&lt;/tr&gt;
                      &lt;/table&gt;

                      &lt;form class="form" action="" method="post" id="table_hierarchy_form"&gt;
                        &lt;div class="input-group"&gt;
                          &lt;input type="text" class="form-control" id="table_hierarchy_table" name="table_hierarchy_table" placeholder="table" /&gt;
                          &lt;span class="input-group-btn"&gt;
                           &lt;button type="submit" class="btn btn-default"&gt;Show&lt;/button&gt;
                          &lt;/span&gt;
                        &lt;/div&gt;
                        &lt;div class="checkbox"&gt;
                          &lt;label&gt;
                            &lt;input type="checkbox" id="table_hierarchy_table_do_label" /&gt; Search table labels
                          &lt;/label&gt;
                        &lt;/div&gt;
                      &lt;/form&gt;

                    &lt;/div&gt;
                  &lt;/div&gt;
                  &lt;div id="table_hierarchy_result_container" class="col-xs-12" style="display: none"&gt;
                    &lt;h4&gt;Hierarchy&lt;/h4&gt;
                    &lt;div id="table_hierarchy_result"&gt;&lt;/div&gt;
                  &lt;/div&gt;
                &lt;/div&gt;
              &lt;/div&gt;

              &lt;div id="system_log_pane" role="tabpanel" class="tab-pane fade"&gt;
                &lt;iframe id="system_log_frame" style="border: 0; width: 100%"&gt;&lt;/iframe&gt;
              &lt;/div&gt;

            &lt;/div&gt;&lt;!--/.tab-content--&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/div&gt;

    &lt;!-- jQuery (necessary for Bootstraps JavaScript plugins) --&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jquery/1.11.3/jquery.min.js"&gt;&lt;/script&gt;
    &lt;script src="https://ajax.googleapis.com/ajax/libs/jqueryui/1.11.4/jquery-ui.min.js"&gt;&lt;/script&gt;

    &lt;!-- Bootstrap --&gt;
    &lt;script src="https://maxcdn.bootstrapcdn.com/bootstrap/3.3.5/js/bootstrap.min.js"&gt;&lt;/script&gt;

    &lt;!-- Bootstrap Toggle --&gt;
    &lt;script src="https://gitcdn.github.io/bootstrap-toggle/2.2.0/js/bootstrap-toggle.min.js"&gt;&lt;/script&gt;

    &lt;!-- Xplore --&gt;
    &lt;script src="/snd_xplore.jsdbx"&gt;&lt;/script&gt;
    &lt;script src="/snd_xplore_reporter.jsdbx"&gt;&lt;/script&gt;

    &lt;!-- CodeMirror - native scripts in ServiceNow --&gt;
    &lt;script src="/codemirror.js"&gt;&lt;/script&gt;
    &lt;script src="/scripts/javascript.js"&gt;&lt;/script&gt;

    &lt;!-- Google Code Prettify --&gt;
    &lt;script src="https://cdn.rawgit.com/google/code-prettify/master/loader/run_prettify.js"&gt;&lt;/script&gt;

    &lt;script src="/snd_xplore_ui.jsdbx"&gt;&lt;/script&gt;
  &lt;/body&gt;
&lt;/html&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/xml&gt;&lt;/sys_ui_macro&gt;&lt;/record_update&gt;</payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>0f6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore_main</target_name>
<type>Macro</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_application_4eb000280f2a020094f3c09ce1050e23</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_application"><sys_app_application action="INSERT_OR_UPDATE"><active>true</active><category display_value="Custom Applications">e0355b31ef303000a61d5a3615c0fb78</category><description>An application for linking Xplore to the ServiceNow UI.&#13;
The Xplore module attempts to create a nice link in the navigation bar for easy access to Xplore.</description><device_type>browser</device_type><hint/><name/><order>100</order><roles>admin</roles><sys_class_name>sys_app_application</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-09-13 13:26:54</sys_created_on><sys_customer_update>true</sys_customer_update><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>4eb000280f2a020094f3c09ce1050e23</sys_id><sys_mod_count>2</sys_mod_count><sys_name>Xplore</sys_name><sys_overrides/><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_app_application_4eb000280f2a020094f3c09ce1050e23</sys_update_name><sys_updated_by>james@snd</sys_updated_by><sys_updated_on>2015-10-01 19:07:27</sys_updated_on><title>Xplore</title><view_name/></sys_app_application></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>476cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>Xplore</target_name>
<type>Application Menu</type>
<update_domain>global</update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_script_include_04cf1a2f0fd2020094f3c09ce1050eba</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.snd_xplore&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description&gt;The snd_xplore function here allows exploratory programming to take place in ServiceNow.&amp;#13;
Simply call snd_xplore(my_obj) in a background script and watch all the objects get printed out on screen.&amp;#13;
Alternatively, call snd_xplore.lookAt(obj) to just see the type and value of the object.&amp;#13;
Check out the UI for more info: /snd_xplore.do&lt;/description&gt;&lt;name&gt;snd_xplore&lt;/name&gt;&lt;script&gt;&lt;![CDATA[var snd_xplore = (function () {

  /**
    Black list to prevent looking over inaccessible Java stuff.
    The majority of these are fully capitalised properties found on Java Packages
    which would otherwise throw an exception.
    There is no point even adding these to the results list.
    E.g. DB, Y, _XML, M2MMAINTAINORDER
  **/
  var blacklistRegExp = /^[A-Z0-9_$]+$/;

  /**
    Additional elements for the black List not captured by RegExp.
    These property names will be completely ignored.
  **/
  var blacklist = [
    //'i18n_SORTABLE', // Any JavaClass?
    //'fDebugSessionLifetime' // GlideSession
  ];
  var blacklistStr;

  /**
    Red list types must not use toString as they will throw an exception.
    They will still show up in the results though.
  **/
  var redlist = [
    //'GlideElementHierarchicalVariables' // GlideRecord
  ];
  var redlistStr;

  function isInScope() {
    return !('print' in gs);
  }

  /**
    summary:
      Quick way to compile the arrays into string which are easily searchable.
  **/
  function compileLists() {
    // prefix/suffix with comma so exact search can be made ',foo,'
    blacklistStr = ',' + blacklist.join(',') + ',';
    redlistStr = ',' + redlist.join(',') + ',';
  }

  /**
    summary:
      The default reporter.
    description:
      Follow this object format in order to build a custom reporter that
      can be passed into snd_xplore for custom reporting requirements.
  **/
  var print_reporter = {

    // #public: see if we are in scoped app and use appropriate function call
    func: isInScope() ? 'debug' : 'print',

    /**
      summary:
        Called when the main object is evaluated.
      param: obj [Object]
        A result object
    **/
    begin: function (obj) {
      gs[this.func]('Xplore: [' + obj.type + '] : ' + obj.string);
    },

    /**
      summary:
        Called each time a property of the object is evaluated.
      param: obj [Object]
        A result object provided by snd_xplore
    **/
    result: function (obj) {
      gs[this.func]('[' + obj.type + '] ' + obj.name + ' = ' + obj.string);
    },

    /**
      summary:
       Called when snd_xplore has finished running.
    **/
    complete: function () {
      gs[this.func]('Complete.');
    }
  };

  /**
    summary:
      Function for evaluating any object and getting its contents.

    description:
      The snd_xplore function here allows exploratory programming to take place
      in ServiceNow. Simply call snd_xplore(my_obj) in a background script
      and watch all the objects get printed out on screen.

    param: obj [Any]
      The object you want to explore!
    param: reporter [Object] Optional
      A custom reporter object so you can customise where the output gets sent.
    param: options [Object] Optional
      Customise what happens using this options object.
      -show_props: [Boolean]
        Set false to disable attempting to parse through the objects' properties.
        Defaults to true.
      see: lookAt
  **/
  function xplore(obj, reporter, options) {

    function ensureProps(obj, mixer) {
      for (var x in mixer) {
        if (typeof obj[x] === 'undefined') {
          obj[x] = mixer[x];
        }
      }
    }

    compileLists();

    // get the default reporter if no reporter has been provided
    if (!reporter) reporter = print_reporter;

    // ensureProps the reporter object to ensure we have the right functions to call
    ensureProps(reporter, {
      begin: function () {},
      result: function () {},
      complete: function () {}
    });

    // ensureProps the options object to setup defaults
    options = options || {};
    ensureProps(options, {
      name: '',
      type: '',
      value: '',
      show_props: true,
      show_strings: true
    });

    // start!
    var target = lookAt(obj, '[Target]', options);
    if (target.string == target.value) target.value = '';
    reporter.begin(target);

    // We may want to evaluate the properties against the blacklist for a Java class
    var isJavaObject = target.type.indexOf('Java') &gt; -1;

    if (options.show_props &amp;&amp; obj !== null &amp;&amp; obj !== undefined) {
      for (var x in obj) {

        // if we are evaluating a Java class then we need to check the Blacklist
        // so we don't even attempt to look at that property as it will just
        // halt the thread and generate an illegal access exception.
        //if (isJavaObject) {
          if (blacklistStr.indexOf(',' + x + ',') &gt; -1 || (isJavaObject &amp;&amp; x.match(blacklistRegExp))) {
            /**reporter.result({
              name: x,
              type: 'blacklisted',
              value: '[unknown]'
            });**/
            continue;
          }
        //}

        // The try/catch is required for things like new GlideDateTime().tableName
        // which can throw a NullPointerException on access.
        try {
          snd_xplore._temp = {
            obj: obj[x],
            x: x,
            options: options
          };

          var o = GlideEvaluator.evaluateString('global.snd_xplore.lookAt(' +
              'global.snd_xplore._temp.obj, ' +
              'global.snd_xplore._temp.x, ' +
              'global.snd_xplore._temp.options)');

          if (o) {
            if (o.string == o.value) o.value = '';
            reporter.result(o);
          }
          //reporter.result(lookAt(obj[x], x, options));
        } catch (e) {
          reporter.result({
            name: x,
            type: Object.prototype.toString.call(obj[x]),
            value: '[Property access error: ' + e  + ']'
          });
        }

      }
    }

    // we are done!
    reporter.complete();
  }

  /**
    summary:
      The magic method that works out what any object is and even attempts to
      find it's contents.

    description:
      Takes any object and an optional name of that object and returns
      a simple result object containing the details of what was found.

    param: obj [Object]
      Any object that needs to be looked at.
    param: name [String] Optional
      The name of the object to populate the result with.

    returns: Object
      An object containing the following properties:
        -name [String]
          The name of the object if it was provided, otherwise an empty string.
        -type [String]
          The class name of the object.
        -value [String]
          The value of the object, if possible. Some objects cannot be evaluated
          due to protection within the ServiceNow Rhino environment.
          Some objects are red listed which means evaluating toString on the object
          fails and generates some kind of warning.
        -show_strings: Boolean
          Set false to disable attempting to locate the string value.
          Defaults to true.
  **/
  function lookAt(obj, name, options) {
    var result = {
      name: name || '',
      type: '',
      value: '',
      string: ''
    };

    if (obj === null || obj === undefined) {
      result.type = '' + obj;
      result.value = ''; //String(obj);
      return result;
    }

    /**
      This is the only 'known' way to find what any type of object is in the
      ServiceNow Rhino environment. It gets the classname, too, which means
      we are able to really see exactly what everything is.
      The result is something like `[Object String]`. The slice removes the
      stuff around `String`.
    **/
    var mainType = Object.prototype.toString.call(obj);
    result.type = mainType.slice(8, -1);
    if (result.type != 'Array') {
      result.value = ''; //Packages.java.lang.String.valueOf(obj); // doesn't work in Geneva
    }

    if (mainType == '[object global]') {
      result.string = '[Global Scope]';
      return result;
    }

    // we cannot read the value of a scope object
    if (options.scope == result.type) {
      result.string = '[' + options.scope + ' Scope]';
      return result;
    }

    // there may be more object exceptions to add here...
    if (redlistStr.indexOf(',' + result.type + ',') &gt; -1) {
      result.string = '[Property type is red-listed]';
      return result;
    }

    if (options.show_strings || options.show_strings === undefined) {

      // handle native JavaScript objects which we know have a toString
      if (obj instanceof Function ||
          obj instanceof Object ||
          obj instanceof Array ||
          obj instanceof Number ||
          obj instanceof Boolean ||
          obj instanceof String ||
          obj instanceof RegExp) {
        result.string = obj.toString();
        return result;
      }

      // handle Java objects which break when trying to toString
      if (result.type === 'Function' || result.type === 'Object') {
        return result;
      }

      // catch all
      try {
        result.string = String(obj);
      } catch (e) {
        result.string = ''; //'[Property type ' + result.type + ' should be red-listed]';
      }

    } else {
      result.string = '[user ignored]';
    }

    return result;
  }

  /**
    summary:
      wrap the lookAt function so it pre compiles the red and black lists.
    see: lookAt
  **/
  xplore.lookAt = function () {
    compileLists();
    return lookAt.apply(this, arguments);
  };

  /**
    summary:
      Manually push a property to the redlist to prevent calling toString on it
    param: name [String]
  **/
  xplore.redlist = function (name) {
    redlist.push('' + name);
  };

  /**
    summary:
      Manually push a property name to the blacklist to completely ignore it
    param: name [String]
  **/
  xplore.blacklist = function (name) {
    blacklist.push('' + name);
  };

  /**
    summary:
      Return the redlist array.
    returns: Array
  **/
  xplore.getRedlist = function () {
    return redlist;
  };
  xplore.redlist_arr = redlist;

  /**
    summary:
      Return the blacklist array.
    returns: Array
  **/
  xplore.getBlacklist = function () {
    return blacklist;
  };
  xplore.blacklist_arr = blacklist;

  /**
    summary:
      Provide a quick way to test any object if it is breaking Xplore
    description:
      Prints all the objects that are being looked at one-by-one.
      The final Info message will be the property that is causing an issue.
  **/
  xplore.test = function (obj) {
    compileLists();
    var obj_arr = [];
    for (var x in obj) {
      obj_arr.push(x);
    }
    obj_arr.sort();
    for (var i = 0; i &lt; obj_arr.length; i++) {
      if (!(i % 100)) {
        gs.flushMessages(); // messages can only contain 100 max
      }
      x = obj_arr[i];
      if (blacklistStr.indexOf(',' + x + ',') &lt; 0) {
        gs.addInfoMessage(i + ': ' + x);
        lookAt(obj[x]);
      } else {
        gs.addErrorMessage(i + ': Blacklisted: ' + x);
      }
    }
    gs.addInfoMessage('Xplore test completed successfully.');
  };

  // #public: String
  // version number of this script [Letter and Patch number].[hotfix].[internal version]
  xplore.version = "G3.0.4";

  return xplore;
})();]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@snd&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-09-10 22:27:24&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;04cf1a2f0fd2020094f3c09ce1050eba&lt;/sys_id&gt;&lt;sys_mod_count&gt;117&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Xplore"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_04cf1a2f0fd2020094f3c09ce1050eba&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@sndeveloper.com&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2016-03-16 08:44:01&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>4b6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>Script Include</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_2d6d96b70f5d528094f3c09ce1050e85</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script"><sys_ui_script action="INSERT_OR_UPDATE"><active>true</active><description>Controls the SND Xplore UI</description><global>false</global><name>snd_xplore_ui</name><script>/*&#13;
  Controls the SND Xplore UI&#13;
*/&#13;
&#13;
// Delay a function, overriding any previous calls for the same id&#13;
var delay = (function () {&#13;
  var timers = {};&#13;
  return function (id, callback, ms) {&#13;
    clearTimeout(timers[id]);&#13;
    timers[id] = setTimeout(callback, ms);&#13;
  };&#13;
})();&#13;
&#13;
// get the minutes, seconds and decisecond since a given time, e.g. 01:32.1&#13;
function getMinutesSince(startTime) {&#13;
  var t = new Date().getTime() - startTime;&#13;
  var ds = Math.floor((t/100) % 10);&#13;
  var seconds = Math.floor((t/1000) % 60);&#13;
  var minutes = Math.floor((t/1000/60) % 60);&#13;
  if (minutes &lt; 10) minutes = '0' + minutes;&#13;
  if (seconds &lt; 10) seconds = '0' + seconds;&#13;
  return minutes + ':' + seconds + '.' + ds;&#13;
}&#13;
&#13;
// main UI object&#13;
var snd_xplore_ui = {};&#13;
&#13;
/*************************************&#13;
              XPLORE&#13;
**************************************/&#13;
&#13;
var snd_xplore_util = {&#13;
  countup_interval: null,&#13;
  loading: function () {&#13;
    $('#xplore_btn')&#13;
        .prop('disabled', true)&#13;
        .html('Loading... &lt;i class="glyphicon glyphicon-refresh ' +&#13;
              'glyphicon-refresh-animate"&gt;&lt;/i&gt;');&#13;
&#13;
    $('#cancel_btn').prop('disabled', false).text('Cancel').show();&#13;
    $('#output_loader').addClass('active');&#13;
&#13;
    var start = new Date().getTime();&#13;
    snd_xplore_util.countup_interval = setInterval(function () {&#13;
      $('#countup').text(getMinutesSince(start));&#13;
    }, 100);&#13;
  },&#13;
  loadingComplete: function () {&#13;
    $('#xplore_btn')&#13;
        .html('Run')&#13;
        .prop('disabled', false);&#13;
&#13;
    $('#cancel_btn').hide();&#13;
    $('#output_loader').removeClass('active');&#13;
    // make sure we are on the output tab&#13;
    $('#script_output_tab').tab('show');&#13;
    // scroll to the top of the output div&#13;
    $('#output_tabs_pane').animate({ scrollTop: 0 }, "fast");&#13;
&#13;
    clearInterval(snd_xplore_util.countup_interval);&#13;
&#13;
    // Google Code-Prettify&#13;
    window.PR.prettyPrint();&#13;
  },&#13;
  execute: function () {&#13;
    // summary:&#13;
    //   Gather the data from the client and run Xplore&#13;
&#13;
    var code = '';&#13;
    if (typeof snd_xplore_editor === 'object') {&#13;
      code = snd_xplore_editor.getValue();&#13;
    } else {&#13;
      code = document.getElementById('snd_xplore').value;&#13;
    }&#13;
&#13;
    var params = {&#13;
      code: code,&#13;
      user_data: document.getElementById('user_data_input').value,&#13;
      runAt: document.getElementById('target').value,&#13;
      breadcrumb: snd_xplore_reporter.getBreadcrumb(),&#13;
      reporter: snd_xplore_reporter,&#13;
      show_props: $('#show_props').is(':checked'),&#13;
      show_strings: $('#show_strings').is(':checked'),&#13;
      html_messages: $('#show_html_messages').is(':checked')&#13;
    };&#13;
&#13;
    snd_xplore(params);&#13;
  },&#13;
  executeNew: function () {&#13;
    snd_xplore_reporter.clearBreadcrumb();&#13;
    this.execute();&#13;
  },&#13;
  demo: function (code, user_data) {&#13;
    var $user_data_input;&#13;
&#13;
    snd_xplore_util.toggleEditor(true, function () {&#13;
      $('#target').val('server');&#13;
      $('#scope').val('global');&#13;
      snd_xplore_editor.setValue(code);&#13;
      snd_xplore_editor.focus();&#13;
&#13;
      if (user_data) {&#13;
        $user_data_input = $('#user_data_input');&#13;
        if (!$user_data_input.val()) {&#13;
          $user_data_input.val(user_data);&#13;
        }&#13;
      }&#13;
    });&#13;
  },&#13;
  toggleEditor: (function () {&#13;
    var output_left = 300;&#13;
    var state = 1;&#13;
    return function (force, callback) {&#13;
      var $this = $('#editor_toggle');&#13;
      var $editor = $('#editor');&#13;
      var $output = $('#output');&#13;
      if ((force === true &amp;&amp; state === 1) || (force === false &amp;&amp; state === 0)) {&#13;
        if (typeof callback === 'function') callback();&#13;
        return;&#13;
      }&#13;
      if ($editor.is(":hidden") || force === true) {&#13;
        $output.animate({left: $editor.outerWidth()}, 400, function () {&#13;
          $editor.fadeIn(400);&#13;
          $this.addClass('active');&#13;
          state = 1;&#13;
          if (typeof callback === 'function') callback();&#13;
        });&#13;
      } else {&#13;
        $editor.fadeOut(400, function () {&#13;
          $output.animate({left: 0}, 400, function () {&#13;
            output_left = $output.css('left');&#13;
            $this.removeClass('active');&#13;
            state = 0;&#13;
            if (typeof callback === 'function') callback();&#13;
          });&#13;
        });&#13;
      }&#13;
    };&#13;
  })(),&#13;
  cancel: function () {&#13;
    // add status=true to get the current status&#13;
    $.ajax('/cancel_my_transaction.do?sysparm_output=xml', {&#13;
      dataType: 'xml'&#13;
    });&#13;
    $('#cancel_btn').prop('disabled', true).text('Cancelling...');&#13;
  }&#13;
};&#13;
&#13;
$('.xplore_demo').on('click', 'a', function (e) {&#13;
  e.preventDefault();&#13;
  $this = $(this);&#13;
  var code, user_data;&#13;
  switch ($this.attr('data-demo')) {&#13;
    case 'GlideRecord':&#13;
      code = 'var gr = new GlideRecord(\'incident\');\n//gr.addQuery(\'\');\ngr.setLimit(1);\ngr.query();\ngr.next();\ngr';&#13;
      break;&#13;
    case 'Array':&#13;
      code = "var a = [];\na.push(['a', 'b', 'c']);\na.push(['x', 'y', 'z']);\na";&#13;
      break;&#13;
    case 'GlideUser':&#13;
      code = "gs.getUser();";&#13;
      break;&#13;
    case 'Logging':&#13;
      code = "gs.debug('Do you like to debug?');\ngs.addInfoMessage('You are using Xplore');";&#13;
      break;&#13;
    case 'scope':&#13;
      code = "this";&#13;
      break;&#13;
    case 'user_data':&#13;
      code = 'var doc = new XMLDocument(user_data);\ndoc.toIndentedString();';&#13;
      user_data = '&lt;?xml version="1.0" encoding="UTF-8" ?&gt;&lt;xml&gt;&lt;incident&gt;&lt;active&gt;true&lt;/active&gt;&lt;/incident&gt;&lt;/xml&gt;';&#13;
      $('#user_data_tab').tab('show');&#13;
      break;&#13;
  }&#13;
  if (code) {&#13;
    snd_xplore_util.demo(code, user_data);&#13;
  }&#13;
});&#13;
&#13;
&#13;
/*************************************&#13;
              REGEX&#13;
**************************************/&#13;
&#13;
var snd_xplore_regex_util = (function () {&#13;
  $intro_panel   = $('#regex_intro_panel');&#13;
  $match_panel   = $('#regex_match_panel');&#13;
  $group_panel   = $('#regex_group_panel');&#13;
  $error_panel   = $('#regex_error_panel');&#13;
  $result        = $('#regex_match');&#13;
  $result_groups = $('#regex_group');&#13;
  function showIntro() {&#13;
    $match_panel.hide();&#13;
    $group_panel.hide();&#13;
    $error_panel.hide();&#13;
    $intro_panel.fadeIn();&#13;
  }&#13;
  function showError(text) {&#13;
    $('#regex_error').empty().append(text);&#13;
    $intro_panel.hide();&#13;
    $match_panel.hide();&#13;
    $group_panel.hide();&#13;
    $error_panel.fadeIn();&#13;
  }&#13;
  function showResult(matches, groups) {&#13;
    $intro_panel.hide();&#13;
    $error_panel.hide();&#13;
    $result.empty().append(matches);&#13;
    $match_panel.fadeIn();&#13;
    if (groups) {&#13;
      $result_groups.empty().append(groups);&#13;
      $group_panel.fadeIn();&#13;
    } else {&#13;
      $group_panel.hide();&#13;
    }&#13;
  }&#13;
&#13;
  snd_xplore.regex.addEvent('start', function () {&#13;
    $('#regex_loading').fadeIn();&#13;
  });&#13;
&#13;
  var escapeHtml = (function () {&#13;
    var map = {&#13;
      '&lt;': '&amp;lt;',&#13;
      '&gt;': '&amp;gt;',&#13;
      '&amp;': '&amp;amp;'&#13;
    };&#13;
    var replace = function (c) {&#13;
      return map[c];&#13;
    };&#13;
    return function (text) {&#13;
      return text.replace(/&lt;|&gt;|&amp;/g, replace);&#13;
    };&#13;
  })();&#13;
&#13;
  snd_xplore.regex.addEvent('done', function(result) {&#13;
    var matchHtml, groupHtml;&#13;
    if (result) {&#13;
      if (result.error) {&#13;
        showError(result.error);&#13;
      } else if (result.matches){&#13;
        matchHtml = '';&#13;
        $.each(result.matches, function (i, item) {&#13;
          item.text = escapeHtml(item.text);&#13;
          if (item.type == 'match') {&#13;
            matchHtml += '&lt;span class="bg-success text-success"&gt;' + item.text + '&lt;/span&gt;';&#13;
          } else {&#13;
            matchHtml += item.text;&#13;
          }&#13;
        });&#13;
        groupHtml = '';&#13;
        if (result.groups) {&#13;
          if (result.groups.join('').length) {&#13;
            $.each(result.groups, function (i, item) {&#13;
              groupHtml += '&lt;h5 class="text-danger"&gt;Match ' + (i + 1) + '&lt;/h5&gt;';&#13;
              groupHtml += '&lt;ol&gt;';&#13;
              $.each(item, function (i, group) {&#13;
                groupHtml += '&lt;li&gt;' + escapeHtml(group) + '&lt;/li&gt;';&#13;
              });&#13;
              groupHtml += '&lt;/ol&gt;';&#13;
            });&#13;
          }&#13;
        }&#13;
        showResult(matchHtml, groupHtml);&#13;
      } else {&#13;
        showError('No result was given.');&#13;
      }&#13;
    } else {&#13;
      showIntro();&#13;
    }&#13;
    $('#regex_loading').hide();&#13;
  });&#13;
&#13;
  // setup the handler to run the regex when the user edits something&#13;
  var run = (function () {&#13;
    var cache = '';&#13;
    return function () {&#13;
      var expression = $('#regex').val();&#13;
      var input = $('#regex_input').val();&#13;
      var options = $('#regex_options').val();&#13;
&#13;
      if (!expression || !input) {&#13;
        showIntro();&#13;
        return;&#13;
      }&#13;
&#13;
      if (cache === input + expression + options) {&#13;
        return;&#13;
      }&#13;
      cache = input + expression + options;&#13;
&#13;
      snd_xplore.regex({&#13;
        expression: expression,&#13;
        input:      input,&#13;
        options:    options,&#13;
        target:     $('#target').val()&#13;
      });&#13;
    };&#13;
  })();&#13;
&#13;
  return {&#13;
    run: run&#13;
  };&#13;
})();&#13;
&#13;
&#13;
/*************************************&#13;
              TABLES&#13;
**************************************/&#13;
&#13;
var snd_xplore_table_util = (function () {&#13;
&#13;
  var api = {&#13;
    tables: {},&#13;
    current: ''&#13;
  };&#13;
&#13;
  function loadTables() {&#13;
    $.ajax({&#13;
      type: 'GET',&#13;
      url: '/snd_xplore.do?action=getTables',&#13;
      dataType: 'json'&#13;
    }).&#13;
    done(function (result) {&#13;
      api.tables = result;&#13;
    }).&#13;
    fail(function () {&#13;
      snd_log('Error: loadTables failed.');&#13;
    });&#13;
  }&#13;
  api.loadTables = loadTables;&#13;
&#13;
  function getTableHierarchy(table, search_labels) {&#13;
    loading(true);&#13;
    api.current = table;&#13;
    $.ajax({&#13;
      type: 'GET',&#13;
      url: '/snd_xplore.do?action=getTableHierarchy' +&#13;
            '&amp;table=' + table +&#13;
            '&amp;search_labels=' + (search_labels ? '1' : '0'),&#13;
      dataType: 'json'&#13;
    }).&#13;
    done(function (result) {&#13;
      var $target = $('#table_hierarchy_result').empty();&#13;
&#13;
      if ('success' in result &amp;&amp; result.success === false) {&#13;
        $target.append('&lt;div class="alert alert-danger"&gt;&lt;strong&gt;' + result.message + '&lt;/strong&gt;&lt;/div&gt;');&#13;
        loading(false);&#13;
        return;&#13;
      }&#13;
&#13;
      function generateHtml(dbo) {&#13;
        var html = '&lt;li&gt;';&#13;
        if (api.current == dbo.name) {&#13;
          html += '&lt;span class="bg-success text-success"&gt;' + dbo.label + '&lt;/span&gt;';&#13;
        } else {&#13;
          html += dbo.label;&#13;
        }&#13;
        html += ' [&lt;a href="#show" data-show="' + dbo.name + '"&gt;' +&#13;
            dbo.name + '&lt;/a&gt;]';&#13;
        html += ' &lt;a href="' + dbo.name + '_list.do" target="_blank" title="Open list"&gt;&lt;i class="glyphicon glyphicon-list-alt" /&gt;&lt;/a&gt;';&#13;
        html += ' &lt;a href="' + dbo.name + '.do" target="_blank" title="Open form"&gt;&lt;i class="glyphicon glyphicon-open-file" /&gt;&lt;/a&gt;';&#13;
        html += ' &lt;a href="sys_db_object.do?sys_id=' + dbo.sys_id + '" target="_blank" title="Open table definition"&gt;&lt;i class="glyphicon glyphicon-cog" /&gt;&lt;/a&gt;';&#13;
        if (dbo.children.length) {&#13;
          html += '&lt;ul&gt;';&#13;
          $.each(dbo.children, function (i, childDbo) {&#13;
            html += generateHtml(childDbo);&#13;
          });&#13;
          html += '&lt;/ul&gt;';&#13;
        }&#13;
        html += '&lt;/li&gt;';&#13;
        return html;&#13;
      }&#13;
      if (result.length) {&#13;
        $.each(result, function (i, dbo) {&#13;
          $target.append('&lt;ul&gt;' + generateHtml(dbo) + '&lt;/ul&gt;');&#13;
        });&#13;
      } else {&#13;
        $target.append('&lt;div class="alert alert-danger"&gt;&lt;strong&gt;No table information found.&lt;/strong&gt;&lt;/div&gt;');&#13;
      }&#13;
      loading(false);&#13;
    }).&#13;
    fail(function () {&#13;
      loading(false);&#13;
      snd_log('Error: getTableHierarchy failed.');&#13;
    });&#13;
  }&#13;
&#13;
  function loading(b) {&#13;
    if (b) {&#13;
      $('#table_hierarchy_loading').show();&#13;
      $('#table_hierarchy_result_container').fadeOut();&#13;
    } else {&#13;
      $('#table_hierarchy_result_container').fadeIn();&#13;
      $('#table_hierarchy_loading').hide();&#13;
    }&#13;
  }&#13;
  api.getTableHierarchy = getTableHierarchy;&#13;
&#13;
  return api;&#13;
&#13;
})();&#13;
&#13;
&#13;
/*************************************&#13;
           SCRIPT SEARCH&#13;
**************************************/&#13;
&#13;
var snd_script_search_util = (function () {&#13;
&#13;
  var api = {};&#13;
  var $list = $('#script_pane_list');&#13;
  var $script_pane_404 = $('#script_pane_404');&#13;
&#13;
  function search(value) {&#13;
    var elements,&#13;
        match,&#13;
        nomatch;&#13;
&#13;
    if(value) {&#13;
&#13;
      value = value.toUpperCase();&#13;
      elements = $list.find('span.script-name');&#13;
&#13;
      match = elements.filter(function (i, el) {&#13;
        return (el.textContent || el.innerText || "").toUpperCase().indexOf(value)&gt;=0;&#13;
      });&#13;
      match.parent().show();&#13;
&#13;
      nomatch = elements.filter(function (i, el) {&#13;
        return (el.textContent || el.innerText || "").toUpperCase().indexOf(value)==-1;&#13;
      });&#13;
      nomatch.parent().hide();&#13;
&#13;
      if (!match.length) {&#13;
        $script_pane_404.show();&#13;
      }&#13;
&#13;
    } else {&#13;
      $list.find("li").show();&#13;
    }&#13;
  }&#13;
&#13;
  function loading(b) {&#13;
    $('#script_pane_loading').toggle(b);&#13;
  }&#13;
&#13;
  api.search = (function () {&#13;
    var requested = false;&#13;
    var filter;&#13;
    return function (value) {&#13;
      filter = value;&#13;
      if (requested) return;&#13;
      loading(true);&#13;
      $script_pane_404.hide();&#13;
      if (!api.records) {&#13;
        requested = true;&#13;
        api.loadAll().done(function () {&#13;
          requested = false;&#13;
          search(filter);&#13;
          loading(false);&#13;
        });&#13;
      } else {&#13;
        search(filter);&#13;
        loading(false);&#13;
      }&#13;
    };&#13;
  })();&#13;
&#13;
  api.addScript = function (sys_id, replace) {&#13;
    loading(true);&#13;
    $.ajax({&#13;
      type: 'GET',&#13;
      url: '/snd_xplore.do?action=getScript&amp;sys_id=' + sys_id,&#13;
      dataType: 'json'&#13;
    }).&#13;
    done(function (result) {&#13;
      var old = snd_xplore_editor.getValue();&#13;
&#13;
      if (old) {&#13;
        if (replace != '1') {&#13;
          if (old.length &gt; 0) old += '\n\n';&#13;
        } else if(!confirm('Warning! This will replace your code.')) {&#13;
          return;&#13;
        } else {&#13;
          old = '';&#13;
        }&#13;
      }&#13;
&#13;
      snd_xplore_editor.setValue(&#13;
        old +&#13;
        '/*************************************' + '\n' +&#13;
        '  ' + result.api_name + '\n' +&#13;
        ' *************************************/' + '\n' +&#13;
        result.script);&#13;
      loading(false);&#13;
&#13;
      // close the pane&#13;
      snd_xplore_ui.side_panes.closeAll();&#13;
    }).&#13;
    fail(function () {&#13;
      snd_log('Error: snd_script_search_util.addScript failed.');&#13;
      loading(false);&#13;
    });&#13;
  };&#13;
&#13;
  api.loadAll = function () {&#13;
    loading(true);&#13;
    return $.ajax({&#13;
      type: 'GET',&#13;
      url: '/snd_xplore.do?action=getScripts',&#13;
      dataType: 'json'&#13;
    }).&#13;
    done(function (result) {&#13;
      api.records = result;&#13;
      $list.empty();&#13;
      $.each(result, function (i, item) {&#13;
        var scope = item.$sys_scope == 'Global' ? '' : ' (' + item.$sys_scope + ')';&#13;
        $list.append($('&lt;li&gt;' +&#13;
          '&lt;span class="script-link script-name" data-sys-id="' + item.sys_id + '"&gt;' +&#13;
          item.name + scope + '&lt;/span&gt; ' +&#13;
          '&lt;span class="script-link script-replace pull-right" data-sys-id="' + item.sys_id + '" ' +&#13;
          'data-replace="1"&gt;' +&#13;
          'replace&lt;/span&gt;' +&#13;
          '&lt;/li&gt;'));&#13;
      });&#13;
      loading(false);&#13;
    }).&#13;
    fail(function () {&#13;
      snd_log('Error: snd_script_search_util.loadAll failed.');&#13;
      loading(false);&#13;
    });&#13;
  };&#13;
&#13;
  // handle script search&#13;
  $('#script_pane_search')&#13;
  .change(function () {&#13;
    snd_script_search_util.search($(this).val());&#13;
    return false;&#13;
  })&#13;
  .keyup(function () {&#13;
    $(this).change();&#13;
  });&#13;
&#13;
  $('#script_pane_list').on('click', 'span.script-link', function (e) {&#13;
    var $anchor = $(this);&#13;
    if (!$anchor.attr('data-sys-id')) {&#13;
      snd_log('Error: script link does not have sys_id attribute');&#13;
    } else {&#13;
      snd_script_search_util.addScript($anchor.attr('data-sys-id'), $anchor.attr('data-replace'));&#13;
    }&#13;
  });&#13;
&#13;
  $('#side_controls a[data-pane="script_pane"]').one('click', function () {&#13;
    api.loadAll();&#13;
  });&#13;
&#13;
  return api;&#13;
})();&#13;
&#13;
&#13;
/*************************************&#13;
            SIDE PANES&#13;
**************************************/&#13;
&#13;
(function () {&#13;
&#13;
  window.snd_xplore_ui.side_panes = {&#13;
    closeAll: function () {&#13;
      $('.side_pane').fadeOut(400);&#13;
      $('#side_controls li a[data-pane]').removeClass('active');&#13;
    }&#13;
  };&#13;
&#13;
  // setup the side pane controls&#13;
  $('#side_controls li').on('click', 'a', function () {&#13;
    var $target = $(this);&#13;
    if (!$target.attr('data-pane')) return;&#13;
&#13;
    $('#side_controls li a').each(function () {&#13;
      var $this = $(this);&#13;
      var pane = $this.attr('data-pane');&#13;
      if (!pane) return;&#13;
      var $pane = $('#' + pane);&#13;
&#13;
      if (this === $target.get(0)) {&#13;
        var workbenchLeft = $('#side_controls').outerWidth();&#13;
        if (!$pane.is(':visible')) {&#13;
          //workbenchLeft += $pane.outerWidth();&#13;
          //$('#workbench').animate({left: workbenchLeft}, 400, function () {&#13;
            $pane.fadeIn(400);&#13;
            //resizeOutputContent();&#13;
          //});&#13;
        } else {&#13;
          $pane.fadeOut(400);//, function () {&#13;
            //$('#workbench').animate({left: workbenchLeft}, 400, function () {&#13;
              //$('#workbench').css('left', '');&#13;
              //resizeOutputContent()&#13;
            //});&#13;
          //});&#13;
        }&#13;
        $this.toggleClass('active');&#13;
      } else {&#13;
        $this.removeClass('active');&#13;
        $pane.hide();&#13;
      }&#13;
    });&#13;
  });&#13;
&#13;
  // auto close the data panes when clicked outside&#13;
  $(document).click(function(event) {&#13;
    if(!$(event.target).closest('.side_pane').length &amp;&amp;&#13;
        !$(event.target).closest('#side_controls').length &amp;&amp;&#13;
        !$(event.target).hasClass('.side_pane')) {&#13;
      snd_xplore_ui.side_panes.closeAll();&#13;
    }&#13;
  });&#13;
&#13;
})();&#13;
&#13;
&#13;
/*************************************&#13;
              INIT&#13;
**************************************/&#13;
&#13;
$(function () {&#13;
&#13;
  // update the selector for the frames&#13;
  (function () {&#13;
    if (window.opener) {&#13;
      var frames = window.opener.frames;&#13;
      var target = $('#target');&#13;
      target.append('&lt;option value="opener"&gt;Opener&lt;/option&gt;');&#13;
      for (var i = 0; frames.length &gt; i; i++) {&#13;
        if (!frames[i].name) continue;&#13;
        target.append('&lt;option value="frame_' + i + '"&gt;Opener: ' + frames[i].name + '&lt;/option&gt;');&#13;
      }&#13;
    }&#13;
  })();&#13;
&#13;
  // Populate the scope selector&#13;
  $(function () {&#13;
    var $scope = $('#scope');&#13;
    $scope.empty();&#13;
    $scope.append($('&lt;option class="text-italic text-muted"&gt;Loading&lt;/option&gt;'));&#13;
&#13;
    $.ajax({&#13;
      type: 'GET',&#13;
      url: '/snd_xplore.do?action=getScopes',&#13;
      dataType: 'json'&#13;
    }).&#13;
    done(function (result) {&#13;
        $scope.empty();&#13;
        $.each(result, function (i, item) {&#13;
          $scope.append($('&lt;option value="' + item.scope + '"&gt;' + item.name + '&lt;/option&gt;'));&#13;
        });&#13;
    }).&#13;
    fail(function () {&#13;
      snd_log('Error: populateScopes failed.');&#13;
    });&#13;
  });&#13;
&#13;
  window.snd_xplore_editor = CodeMirror.fromTextArea(document.getElementById("snd_xplore"), {&#13;
    lineNumbers: true,&#13;
    lineWrapping: true,&#13;
    tabSize: 2,&#13;
    indentUnit: 2,&#13;
    smartIndent: true,&#13;
    matchBrackets: true,&#13;
    mode: 'javascript'&#13;
  });&#13;
&#13;
  var sxr = snd_xplore_reporter;&#13;
  sxr.initialize();&#13;
  sxr.addEvent('start', snd_xplore_util.loading);&#13;
  sxr.addEvent('done', snd_xplore_util.loadingComplete);&#13;
  sxr.addEvent('click.interactive-result', snd_xplore_util.execute);&#13;
  sxr.addEvent('click.breadcrumb', snd_xplore_util.execute);&#13;
&#13;
&#13;
  // handle the run button clicking&#13;
  $('#xplore_btn').click(function () {&#13;
    snd_xplore_util.executeNew();&#13;
  });&#13;
&#13;
  // handle the cancel button clicking&#13;
  $('#cancel_btn').click(function () {&#13;
    snd_xplore_util.cancel();&#13;
  });&#13;
&#13;
  // Setup property toggles&#13;
  $('#show_props,#show_strings').&#13;
    bootstrapToggle({&#13;
      on: 'Show',&#13;
      off: 'Hide',&#13;
      size: 'mini',&#13;
      onstyle: 'success',&#13;
      offstyle: 'danger',&#13;
      width: 75&#13;
    });&#13;
  $('#show_html_messages').&#13;
    bootstrapToggle({&#13;
      on: 'HTML',&#13;
      off: 'Text',&#13;
      onstyle: 'success',&#13;
      offstyle: 'warning',&#13;
      size: 'mini',&#13;
      width: 75&#13;
    });&#13;
  $('#wrap_output_pre').&#13;
    bootstrapToggle({&#13;
      on: 'Wrap',&#13;
      off: 'No wrap',&#13;
      onstyle: 'success',&#13;
      offstyle: 'warning',&#13;
      size: 'mini',&#13;
      width: 75&#13;
    }).change(function () {&#13;
      if (this.checked) {&#13;
        $('#script_output').addClass('wrap-pre');&#13;
      } else {&#13;
        $('#script_output').removeClass('wrap-pre');&#13;
      }&#13;
    });&#13;
&#13;
  // set default to wrapped&#13;
  if ($('#wrap_output_pre:checked')) {&#13;
    $('#script_output').addClass('wrap-pre');&#13;
  }&#13;
&#13;
  // regex input trigger&#13;
  $('#regex,#regex_options,#regex_input').on('keyup', function () {&#13;
    delay('testRegex', snd_xplore_regex_util.run, 700);&#13;
  });&#13;
&#13;
  // table input trigger&#13;
  $('#table_hierarchy_form').on('submit', function (e) {&#13;
    e.preventDefault();&#13;
    var table = $('#table_hierarchy_table').val();&#13;
    var search_labels = $('#table_hierarchy_table_do_label').is(':checked');&#13;
    //if (!table) return;&#13;
    //delay('tableHierarchy', function () {&#13;
      snd_xplore_table_util.getTableHierarchy(table, search_labels);&#13;
    //}, 700);&#13;
  });&#13;
&#13;
  // table hierarchy link trigger&#13;
  $('#table_hierarchy_result').on('click', 'a', function (e) {&#13;
    var $this = $(this);&#13;
    var table;&#13;
    table = $this.attr('data-show');&#13;
    if (table) {&#13;
      e.preventDefault();&#13;
      $('#table_hierarchy_table').val(table);&#13;
      snd_xplore_table_util.getTableHierarchy(table);&#13;
    }&#13;
  });&#13;
&#13;
&#13;
&#13;
  // setup the editor toggle button&#13;
  $('#editor_toggle').on('click', function () {&#13;
    snd_xplore_util.toggleEditor();&#13;
  });&#13;
&#13;
  // Execute the script again when the breadcrumb is reset&#13;
  $('#clearBreadcrumb').on('click', function () {&#13;
    snd_xplore_util.executeNew();&#13;
  });&#13;
&#13;
  // execute when Ctrl + Enter is used&#13;
  $('#editor').keydown(function (event) {&#13;
    if (event.ctrlKey) {&#13;
      if (event.keyCode == 10 || event.keyCode == 13) {&#13;
        event.preventDefault();&#13;
        snd_xplore_util.executeNew();&#13;
      }&#13;
    }&#13;
  });&#13;
&#13;
  var resizeUtil = {&#13;
    calcEditorRatio: function (store) {&#13;
      var ratio = $('#editor').width() / $('#workbench').width();&#13;
      if (store) {&#13;
        resizeUtil.editorRatio = ratio;&#13;
      }&#13;
      return ratio;&#13;
    },&#13;
    editorRatio: 0,&#13;
&#13;
    calcWorkbenchWidth: function (store) {&#13;
      var width = $('#workbench').width();&#13;
      if (store) {&#13;
        resizeUtil.workbenchWidth = width;&#13;
      }&#13;
      return width;&#13;
    },&#13;
    workbenchWidth: 0&#13;
  };&#13;
  resizeUtil.calcEditorRatio(true);&#13;
  resizeUtil.calcWorkbenchWidth(true);&#13;
&#13;
  // make the code mirror editor resizable&#13;
  $('#editor').resizable({&#13;
    containment: 'parent',&#13;
    handles: {'e': '.ui-resizable-e'},&#13;
    minWidth: 100,&#13;
    resize: function (e, ui) {&#13;
       $('#output').css('left', ui.size.width + 'px');&#13;
       resizeUtil.calcEditorRatio(true);&#13;
    }&#13;
  });&#13;
&#13;
  // set the width of the editor and output so they are pixels instead of percents&#13;
  // this is so the editor looks right when the side-pane is shown/hidden&#13;
  (function () {&#13;
    var $output = $('#output');&#13;
    var $editor = $('#editor');&#13;
    var editorWidth = $editor.outerWidth();&#13;
    $output.css('left', editorWidth);&#13;
    $editor.css('width', editorWidth);&#13;
  })();&#13;
&#13;
  // Setup the onChange handler for hiding scope select&#13;
  // when the target is not the client.&#13;
  $('#target').on('change', function () {&#13;
    if (this.value == 'server') {&#13;
      $('#scope').fadeIn();&#13;
    } else {&#13;
      $('#scope').fadeOut();&#13;
    }&#13;
  });&#13;
&#13;
  // make tabs clickable&#13;
  $('#output_tabs a').click(function (e) {&#13;
    e.preventDefault();&#13;
    $(this).tab('show');&#13;
  });&#13;
&#13;
  // make system log iframe load on tab click&#13;
  $('#system_log_tab').one('click', function () {&#13;
    $('#system_log_frame').attr('src', '/syslog_list.do?sysparm_query=sys_created_onONToday%40javascript%3Ags.daysAgoStart(0)%40javascript%3Ags.daysAgoEnd(0)');&#13;
&#13;
    // now make it reload every time the tab is double clicked&#13;
    $('#system_log_tab').dblclick(function () {&#13;
      var $frame = $('#system_log_frame');&#13;
      $frame.attr('src', $frame.attr('src'));&#13;
    });&#13;
&#13;
  });&#13;
&#13;
  $output_tabs_pane = $('#output_tabs_pane');&#13;
&#13;
  // facilitate system log frame resizing&#13;
  function resizeLogPane() {&#13;
    var $output_content = $('#output_content');&#13;
    var $output_tabs = $('#output_tabs');&#13;
    var $el = $('#system_log_frame');&#13;
    $el.css('height', $output_content.height() - $output_tabs.height() - 10);&#13;
  }&#13;
  resizeLogPane();&#13;
&#13;
  // update the output pane so the tabs can stack and be seen&#13;
  function resizeOutputContent() {&#13;
    $output_tabs_pane.css('top', $('#output_tabs').outerHeight() + 'px');&#13;
  }&#13;
  resizeOutputContent();&#13;
&#13;
  function resizeUserData() {&#13;
    var $user_data_pane = $('#user_data_pane');&#13;
    var user_data_input = $('#user_data_input').get(0);&#13;
    var remaining_space;&#13;
&#13;
    user_data_input.style.height = '';&#13;
    remaining_space = $output_tabs_pane.height() - $user_data_pane.height();&#13;
&#13;
    if (remaining_space &gt; 10) {&#13;
      user_data_input.style.height = (remaining_space - 10) + 'px';&#13;
    }&#13;
  }&#13;
  resizeUserData();&#13;
&#13;
  // resize the view when the window resizes&#13;
  $(window).resize(function () {&#13;
    // need to see if we are changing the window size or just the editor width&#13;
    // we do this by checking if the workbench width has changed&#13;
    if (resizeUtil.workbenchWidth != resizeUtil.calcWorkbenchWidth(true)) {&#13;
      var newWidth = $('#workbench').width() * resizeUtil.editorRatio;&#13;
      var $editor = $('#editor');&#13;
      $editor.css('width', newWidth);&#13;
      if ($editor.is(':visible')) {&#13;
        $('#output').css('left', newWidth);&#13;
      }&#13;
    }&#13;
&#13;
    resizeLogPane();&#13;
    resizeOutputContent();&#13;
    resizeUserData();&#13;
  });&#13;
&#13;
  snd_xplore_editor.focus();&#13;
  $('#window_loader').removeClass('active');&#13;
});&#13;
</script><script_name/><sys_class_name>sys_ui_script</sys_class_name><sys_created_by>james@sndeveloper.com</sys_created_by><sys_created_on>2016-02-07 20:06:00</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>2d6d96b70f5d528094f3c09ce1050e85</sys_id><sys_mod_count>81</sys_mod_count><sys_name>snd_xplore_ui</sys_name><sys_package display_value="Xplore" source="0f6ab99a0f36060094f3c09ce1050ee8">0f6ab99a0f36060094f3c09ce1050ee8</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_ui_script_2d6d96b70f5d528094f3c09ce1050e85</sys_update_name><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2016-05-03 16:06:23</sys_updated_on><use_scoped_format>false</use_scoped_format></sys_ui_script></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>4f6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore_ui</target_name>
<type>UI Script</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_app_module_02aff9e00f6a020094f3c09ce1050ece</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update sys_domain="global" table="sys_app_module"><sys_app_module action="INSERT_OR_UPDATE"><active>true</active><application display_value="Xplore">4eb000280f2a020094f3c09ce1050e23</application><assessment/><content_page/><device_type/><filter/><hint>Xplore: the ServiceNow developer toolset</hint><homepage/><image/><link_type>DIRECT</link_type><map_page/><mobile_title>Xplore</mobile_title><mobile_view_name>Mobile</mobile_view_name><name/><order/><override_menu_roles>false</override_menu_roles><query>snd_xplore.do</query><report/><roles>admin</roles><survey/><survey_overwrite>true</survey_overwrite><sys_class_name>sys_app_module</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-09-13 22:42:06</sys_created_on><sys_customer_update>true</sys_customer_update><sys_domain>global</sys_domain><sys_domain_path>/</sys_domain_path><sys_id>02aff9e00f6a020094f3c09ce1050ece</sys_id><sys_mod_count>21</sys_mod_count><sys_name>Xplore</sys_name><sys_overrides/><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_app_module_02aff9e00f6a020094f3c09ce1050ece</sys_update_name><sys_updated_by>james@snd</sys_updated_by><sys_updated_on>2015-12-16 14:25:21</sys_updated_on><timeline_page/><title>Xplore</title><uncancelable>false</uncancelable><view_name/><window_name>_blank</window_name></sys_app_module></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>876cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>Xplore</target_name>
<type>Module</type>
<update_domain>global</update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_script_include_1aefea960f44924094f3c09ce1050ed7</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_script_include"&gt;&lt;sys_script_include action="INSERT_OR_UPDATE"&gt;&lt;access&gt;public&lt;/access&gt;&lt;active&gt;true&lt;/active&gt;&lt;api_name&gt;global.snd_XploreReporter&lt;/api_name&gt;&lt;client_callable&gt;false&lt;/client_callable&gt;&lt;description/&gt;&lt;name&gt;snd_XploreReporter&lt;/name&gt;&lt;script&gt;&lt;![CDATA[/**
  summary:
    A reporter to pass to snd_xplore for capturing results
**/
function snd_XploreReporter() {};

// #protected: a standard result object
snd_XploreReporter.prototype.response = {
  // The type of object that is being evaluated
  type: '',
  // the valueOf value of the object being evaluated
  value: '',
  // the list of property objects
  report: [],
  // the list of captured messages
  messages: [],
  // a list of logs that occured very recently
  logs: [],
  // the string value of the object being evaluated
  string: ''
};

/**
  summary:
    Get the response object.
**/
snd_XploreReporter.prototype.getResponse = function () {
  return this.response;
};

/**
  summary:
    Called when the main object is evaluated.
  obj: Object
    A result object provided by snd_xplore
**/
snd_XploreReporter.prototype.begin = function (obj) {
  this.response.type = obj.type;
  this.response.value = obj.value;
  this.response.string = obj.string;
};

/**
  summary:
    Called each time a property of the object is evaluated.
  obj: Object
    A result object provided by snd_xplore
**/
snd_XploreReporter.prototype.result = function (obj) {
  this.response.report.push(obj);
};

/**
  summary:
    Push messages onto the response message stack.
**/
snd_XploreReporter.prototype.addMessage = function (type, msg) {
  this.response.messages.push({
    t: type,
    v: msg
  });
};

snd_XploreReporter.prototype.addLog = function (logObj) {
  this.response.logs.push(logObj);
};

/**
  summary:
    Get all the output messages generated in this session, then flush them.
  description:
    Pushes an array of objects containing two properties describing the message
    into the response.messages array. Each object in the array looks like this:
      t: String
        The property type: log, info, error, access
      v: String
        The message.
**/
snd_XploreReporter.prototype.getOutputMessages = function () {
  var tmp, i;

  // access
  tmp = gs.getAccessMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    this.addMessage('access', tmp[i]);
  }

  // errors
  tmp = gs.getErrorMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    this.addMessage('error', tmp[i]);
  }

  // info
  tmp = gs.getInfoMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    this.addMessage('info', tmp[i]);
  }

  // gs.print
  tmp = GlideSessionDebug.getOutputMessages().toArray();
  for (i = 0; i &lt; tmp.length; i++) {
    this.addMessage('log', tmp[i].line.replace(' : ', ' ')); // remove unnecessary colon
  }

  // remove all the messages we just retrieved
  GlideSessionDebug.clearOutputMessages();
  gs.flushAccessMessages();
  gs.flushMessages();
};


/**
  summary:
    Get any errors or warning that occured for the user in the last minute or so.
  returns: Array
    An array of objects containing the properties:
      created: Number
      level: String
      Message: String
      Source: String
**/
snd_XploreReporter.prototype.getLogs = function () {
  var levelMap = {
    '-1': 'Debug',
    '0': 'Info',
    '1': 'Warning',
    '2': 'Error'
  };
  var errors = [];
  var gr = new GlideRecord('syslog');
  gr.addQuery('sys_created_on', 'ON', 'Current minute@javascript:gs.minutesAgoStart(0)@javascript:gs.minutesAgoEnd(0)');
  gr.addQuery('sys_created_by', '=', gs.getUserName());
  gr.addQuery('level', 'IN', '1,2');
  gr.orderBy('sys_created_on');
  gr.query();
  while (gr.next()) {
    this.addLog({
      created: gr.sys_created_on.getDisplayValue(),
      level: levelMap[gr.getValue('level')],
      message: gr.getValue('message'),
      source: gr.getValue('source')
    });
  }
  return errors;
};
]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_script_include&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@snd&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-12-03 02:15:50&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;1aefea960f44924094f3c09ce1050ed7&lt;/sys_id&gt;&lt;sys_mod_count&gt;1&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_XploreReporter&lt;/sys_name&gt;&lt;sys_package display_value="Xplore" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Xplore"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_script_include_1aefea960f44924094f3c09ce1050ed7&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@snd&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2015-12-03 02:25:49&lt;/sys_updated_on&gt;&lt;/sys_script_include&gt;&lt;/record_update&gt;</payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>8b6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_XploreReporter</target_name>
<type>Script Include</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_2f4741da0fa6420094f3c09ce1050e22</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script"><sys_ui_script action="INSERT_OR_UPDATE"><active>true</active><description>The Xplore UI runner script used on /snd_xplore.do</description><global>false</global><name>snd_xplore</name><script>/* -----------------------------------------------------&#13;
                        XPLORE&#13;
------------------------------------------------------*/&#13;
var snd_xplore = (function () {&#13;
&#13;
  function run(params) {&#13;
    // summary:&#13;
    //   Run some code and send the results to the reporter&#13;
    // params: Object&#13;
    //   An instruction object&#13;
&#13;
    var reporter = params.reporter || defaultReporter();&#13;
&#13;
    reporter.start(params);&#13;
&#13;
    if (!params.code) {&#13;
      var result = psuedoResult();&#13;
      message(result, 'error', 'Expression required.');&#13;
      reporter.done(result);&#13;
      return;&#13;
    }&#13;
&#13;
    if (params.runAt == "server") {&#13;
      runServerCode(params);&#13;
    } else {&#13;
      runClientCode(params);&#13;
    }&#13;
  }&#13;
&#13;
  function runClientCode(params) {&#13;
    // summary:&#13;
    //   Run the script in the client and get the results&#13;
    // params: Object&#13;
    //   An instruction object&#13;
&#13;
    var result = psuedoResult();&#13;
    var target = findTarget(params.runAt);&#13;
&#13;
    // spoof ServiceNow's jslog function&#13;
    var _jslog = target.jslog;&#13;
    target.jslog = function(msg, src) {&#13;
      var d = new Date();&#13;
      var timestamp =&#13;
        ('0' + d.getHours()).substr(-2) + ':' +&#13;
        ('0' + d.getMinutes()).substr(-2) + ':' +&#13;
        ('0' + d.getSeconds()).substr(-2) + '.' +&#13;
        d.getMilliseconds();&#13;
      if (src) {&#13;
        msg = timestamp + ': [' + src + '] ' + msg;&#13;
      } else {&#13;
        msg = timestamp + ': ' + msg;&#13;
      }&#13;
      message(result, 'log', msg);&#13;
    };&#13;
&#13;
    var getType = (function () {&#13;
      var toStr = Object.prototype.toString;&#13;
      return function (o) {&#13;
        var type = toStr.call(o).split(' ').pop();&#13;
        return type.substr(0, type.length - 1);&#13;
      };&#13;
    }());&#13;
&#13;
    if (target) {&#13;
      try {&#13;
        window.user_data = params.user_data;&#13;
        var eResult = target.eval(params.code);&#13;
&#13;
        if (params.breadcrumb) {&#13;
          eResult = dotwalk(eResult, params.breadcrumb);&#13;
        }&#13;
&#13;
        result.type = getType(eResult);&#13;
        result.string = '' + eResult;&#13;
&#13;
        if (params.show_props) {&#13;
          for (var x in eResult) {&#13;
            result.report.push({&#13;
              name: x,&#13;
              type: getType(eResult[x]),&#13;
              string: params.show_strings ? '' + eResult[x] : '[user ignored]'&#13;
            });&#13;
          }&#13;
        }&#13;
&#13;
      } catch (e) {&#13;
        message(result, 'error', e);&#13;
      }&#13;
    }&#13;
&#13;
    target.jslog = _jslog;&#13;
    params.reporter.done(result);&#13;
&#13;
    function dotwalk(obj, path) {&#13;
      // summary:&#13;
      //   Dotwalk a path on an object&#13;
&#13;
      var pathArr = path.split('.');&#13;
      var o = obj;&#13;
      for (var i = 0; i &lt; pathArr.length; i++) {&#13;
        path = pathArr[i];&#13;
        if (path.indexOf('()') &gt; 0) {&#13;
          o = o[path.substr(0, path.length - 2)]();&#13;
        } else {&#13;
          o = o[path];&#13;
        }&#13;
      }&#13;
      return o;&#13;
    }&#13;
&#13;
    function findTarget(runAt) {&#13;
      // summary:&#13;
      //   Get the client target window for the code&#13;
      // runAt: string&#13;
      //   The target window: 'opener' or 'frame_{n}'&#13;
      //   Leave empty or set false for the standard window&#13;
      // return the target window&#13;
&#13;
      var target;&#13;
      if (typeof runAt === 'string' &amp;&amp; (runAt == 'opener' || runAt.indexOf('frame_') === 0)) {&#13;
        if (!window.opener) {&#13;
          message(result, 'error', 'Cannot evaluate in parent; no opener found.');&#13;
        } else if (runAt == 'opener') {&#13;
          target = window.opener;&#13;
        } else {&#13;
          var i = parseInt(runAt.split('_')[1], 10);&#13;
          target = window.opener.frames.length &gt;= i ? window.opener.frames[i] : false;&#13;
          if (!target) {&#13;
            message(result, 'error', 'Invalid frame index. Frame ' + i + ' not found.');&#13;
          }&#13;
        }&#13;
      } else {&#13;
        target = window;&#13;
      }&#13;
      return target;&#13;
    }&#13;
  }&#13;
&#13;
  function runServerCode(params) {&#13;
    // summary:&#13;
    //   Perform an ajax call to our processor to run the script and get results&#13;
    // code: string&#13;
    // breadcrumb: array&#13;
&#13;
    $.ajax({&#13;
      type: "POST",&#13;
      url: "/snd_xplore.do?action=run",&#13;
      data: {&#13;
        data: JSON.stringify({&#13;
          code: params.code,&#13;
          user_data: params.user_data,&#13;
          breadcrumb: params.breadcrumb,&#13;
          scope: $('#scope').val(),&#13;
          show_props: params.show_props,&#13;
          show_strings: params.show_strings&#13;
        })&#13;
      },&#13;
      dataType: "json"&#13;
    })&#13;
    .done(function (result) {&#13;
      if (!result) {&#13;
        result = psuedoResult();&#13;
        message(result, 'error', 'The server did not return a result. This is likely because' +&#13;
            ' of an uncatchable error. Please check the node logs for the possibility' +&#13;
            ' of further information if you are unsure of the cause.');&#13;
        enrichWithLogs(result);&#13;
      } else {&#13;
        params.reporter.done(result);&#13;
      }&#13;
    })&#13;
    .fail(function (xhr) {&#13;
      $.ajax({&#13;
        type: 'GET',&#13;
        url: '/snd_xplore.do?action=logs',&#13;
        dataType: 'json'&#13;
      })&#13;
      .done(function (result) {&#13;
        if (xhr.responseText) {&#13;
          message(result, '1', xhr.responseText); // 1 = warning&#13;
        } else {&#13;
          message(result, 'error', 'Request failed.');&#13;
        }&#13;
        params.reporter.done(result);&#13;
      })&#13;
      .fail(function () {&#13;
        var result = psuedoResult();&#13;
        message(result, 'error', 'Server execution failed. The node logs may or may not be helpful.');&#13;
        if (xhr.responseText) message(result, '1', xhr.responseText); // 1 = warning&#13;
        params.reporter.done(result);&#13;
      });&#13;
    });&#13;
  }&#13;
&#13;
  function psuedoResult() {&#13;
    // summary:&#13;
    //   Replicate the result object returned by the server&#13;
&#13;
    return {&#13;
      type: '',&#13;
      string: '',&#13;
      report: [],&#13;
      messages: []&#13;
    };&#13;
  }&#13;
&#13;
  function message(result, type, value) {&#13;
    // summary:&#13;
    //   Write a message to the result object&#13;
    // type: string&#13;
    // value: string&#13;
&#13;
    result.messages.push({&#13;
      t: '' + type,&#13;
      v: '' + value&#13;
    });&#13;
  }&#13;
&#13;
  function defaultReporter() {&#13;
    return {&#13;
      start: function () {&#13;
        // summary:&#13;
        //   called when the code evaluation begins&#13;
&#13;
        snd_log('Begin Xplore default reporter.');&#13;
      },&#13;
      done: function (result) {&#13;
        // summary:&#13;
        //   called when the code evaluation is complete&#13;
&#13;
        snd_log('Xplore complete.', result);&#13;
      }&#13;
    };&#13;
  }&#13;
&#13;
  return run;&#13;
&#13;
})();&#13;
&#13;
/* -----------------------------------------------------&#13;
                        LOG&#13;
------------------------------------------------------*/&#13;
&#13;
/**&#13;
  summary:&#13;
    Ensure that the snd_log function is created. Used to ensures that scripts&#13;
    do not break when console isn't available.&#13;
  arguments: mixed&#13;
    All arguments are printed to the log (when console is available)&#13;
**/&#13;
if (typeof window.snd_log !== 'function') {&#13;
  window.snd_log = (function () {&#13;
    if (typeof console == 'object' &amp;&amp; typeof console.log == 'function') {&#13;
      return function () {&#13;
        for (var i = 0; i &lt; arguments.length; i++) console.log(arguments[i]);&#13;
      };&#13;
    }&#13;
    return function () {};&#13;
  })();&#13;
}&#13;
&#13;
/* -----------------------------------------------------&#13;
                        REGEX&#13;
------------------------------------------------------*/&#13;
snd_xplore.regex = (function () {&#13;
&#13;
  /**&#13;
    summary:&#13;
      The main function for evaluating the regex call.&#13;
    returns: type&#13;
  **/&#13;
  function testRegex(config) {&#13;
    testRegex.fireEvent('start');&#13;
&#13;
    var expression = config.expression;&#13;
    var options = config.options;&#13;
    var input = config.input;&#13;
&#13;
    if (config.target == 'server') {&#13;
      testServerRegex(input, expression, options);&#13;
    } else {&#13;
      testClientRegex(input, expression, options);&#13;
    }&#13;
  }&#13;
&#13;
  /**&#13;
    summary:&#13;
      Display the results on screen&#13;
    result: Object&#13;
      See resultGenerator()&#13;
  **/&#13;
  function displayRegexResult(result) {&#13;
    var data = {};&#13;
    if (result) {&#13;
      if (result.error) {&#13;
        data.error = result.error;&#13;
      } else if (!result.error &amp;&amp; !result.matches.length) {&#13;
        data.error = 'No match.';&#13;
      } else {&#13;
          data = processResult(result);&#13;
      }&#13;
    } else {&#13;
      data.error = 'ParseError: No regex result to process.';&#13;
    }&#13;
    testRegex.fireEvent('done', this, [data]);&#13;
  }&#13;
&#13;
  /**&#13;
    summary:&#13;
      Process a regex result and display it on screen&#13;
    result: Object&#13;
      An object containing:&#13;
      matches: Array [Object]&#13;
        Collection of match objects each with an index and length&#13;
      groups: Array [String]&#13;
        Collection of groups that were matched&#13;
      input:&#13;
        The original input&#13;
  **/&#13;
  function processResult(result) {&#13;
    var input = result.input,&#13;
        ret = {&#13;
          matches: [],&#13;
          groups: result.groups || []&#13;
        };&#13;
&#13;
    function addMatch(text, type) {&#13;
      ret.matches.push({&#13;
        text: text,&#13;
        type: type || ''&#13;
      });&#13;
    }&#13;
&#13;
    if (result.matches.length) {&#13;
      var lastEnd = 0;&#13;
      $.each(result.matches, function (i, item) {&#13;
        addMatch(input.substr(lastEnd, item.index - lastEnd));&#13;
        addMatch(input.substr(item.index, item.length), 'match');&#13;
        lastEnd = item.index + item.length;&#13;
      });&#13;
      addMatch(input.substr(lastEnd));&#13;
    }&#13;
&#13;
    return ret;&#13;
  }&#13;
&#13;
  /**&#13;
    summary:&#13;
      Evaluate a regular expression against a string&#13;
    input: String&#13;
      The string to test with the regex.&#13;
    expression: String&#13;
      The regular expression as a string&#13;
    options: String (Optional)&#13;
      The regular exression options, e.g. 'g'&#13;
    returns: Object&#13;
  **/&#13;
  function evalRegex(input, expression, options) {&#13;
    var regex,&#13;
        matches = [],&#13;
        groups = [],&#13;
        m,&#13;
        loop = options ? options.toString().indexOf('g') &gt;= 0: false;&#13;
&#13;
    if (input &amp;&amp; expression) {&#13;
      options += '';&#13;
      try {&#13;
        regex = new RegExp(expression, options);&#13;
      } catch (e) {&#13;
        return {&#13;
          error: '' + e&#13;
        };&#13;
      }&#13;
      while ((m = regex.exec(input))) {&#13;
        matches.push({&#13;
          index: m.index,&#13;
          length: m[0].length&#13;
        });&#13;
        groups.push(m.slice(1));&#13;
        if (!loop) break;&#13;
      }&#13;
    }&#13;
    return {&#13;
      matches: matches,&#13;
      groups: groups,&#13;
      input: input&#13;
    };&#13;
  }&#13;
&#13;
  function testClientRegex(input, expression, options) {&#13;
    try {&#13;
      var result = evalRegex(input, expression, options);&#13;
      displayRegexResult(result);&#13;
    } catch (e) {&#13;
      var estr = '' + e;&#13;
      var index = estr.indexOf(input);&#13;
      if (index &gt;= 0) {&#13;
        estr = estr.substr(index + input.length + 4);&#13;
      }&#13;
      error(estr);&#13;
    }&#13;
  }&#13;
&#13;
  function error(text) {&#13;
    testRegex.fireEvent('done', this, [{error: text}]);&#13;
  }&#13;
&#13;
  var testServerRegex = (function () {&#13;
    var xhr;&#13;
    return function testServerRegex(input, expression, options) {&#13;
      if (xhr &amp;&amp; xhr.readyState != 4) {&#13;
        xhr.abort();&#13;
      }&#13;
      xhr = $.ajax({&#13;
        type: "POST",&#13;
        url: "/snd_xplore.do?action=regex",&#13;
        data: {&#13;
          data: JSON.stringify({&#13;
            input: input,&#13;
            expression: expression,&#13;
            options: options&#13;
          })&#13;
        },&#13;
        dataType: "json"&#13;
      }).&#13;
      done(function (result) {&#13;
        displayRegexResult(result);&#13;
      }).&#13;
      fail(function (xhr, status) {&#13;
        if (status != 'abort') {&#13;
          snd_log('Server regex call failed.');&#13;
        }&#13;
      });&#13;
    };&#13;
  })();&#13;
&#13;
  var events = {};&#13;
&#13;
  testRegex.addEvent = function (name, fn) {&#13;
    if (typeof events[name] !== 'object') {&#13;
      events[name] = [];&#13;
    }&#13;
    events[name].push(fn);&#13;
  };&#13;
&#13;
  testRegex.fireEvent = function (name, scope, args) {&#13;
    var eventArr = typeof events[name] === 'object' ? events[name] : null;&#13;
    if (!eventArr) return;&#13;
    for (var i = 0; i &lt; eventArr.length; i++) {&#13;
      if (typeof eventArr[i] === 'function') {&#13;
        eventArr[i].apply(scope || this, args);&#13;
      }&#13;
    }&#13;
  };&#13;
&#13;
  return testRegex;&#13;
})();</script><script_name/><sys_class_name>sys_ui_script</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-09-19 05:04:58</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>2f4741da0fa6420094f3c09ce1050e22</sys_id><sys_mod_count>132</sys_mod_count><sys_name>snd_xplore</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_ui_script_2f4741da0fa6420094f3c09ce1050e22</sys_update_name><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2016-03-15 10:15:12</sys_updated_on><use_scoped_format>false</use_scoped_format></sys_ui_script></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>8f6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>UI Script</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>content_css_efd550a80f2a020094f3c09ce1050ecf</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="content_css"><content_css action="INSERT_OR_UPDATE"><name>snd_xplore</name><style>/*-----------------------------------&#13;
        CODEMIRROR OVERRIDES&#13;
-----------------------------------*/&#13;
.CodeMirror {&#13;
    line-height: 1.1em;&#13;
    border: 1px solid #ccc;&#13;
    box-sizing: content-box;&#13;
}&#13;
.CodeMirror-gutter {&#13;
    min-width: 3em;&#13;
}&#13;
.cm_active_line {&#13;
    background: #e8f2fe !important;&#13;
    width: 100%&#13;
}&#13;
.cm_error {&#13;
    background: transparent url(/images/icons/error_12x12.jpgx) no-repeat scroll top left;&#13;
}&#13;
.cm_warning {&#13;
    background: transparent url(/images/icons/warning_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.codemirror .cm_error {&#13;
    background: transparent url(/images/icons/error_12x12.jpgx) no-repeat scroll top left;&#13;
}&#13;
.codemirror .cm_warning {&#13;
    background: transparent url(/images/icons/warning_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.CodeMirror div {&#13;
    line-height: 1.2em;&#13;
    font-family: Menlo, Consolas, monospace;&#13;
    font-size: 12px;&#13;
}&#13;
.outputmsg_error_fullscreen {&#13;
    position: fixed;&#13;
    bottom: 0px;&#13;
    z-index: 1000;&#13;
}&#13;
.cm_unfold {&#13;
    background: transparent url(/images/icons/filter_hide_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.cm_fold {&#13;
    background: transparent url(/images/icons/filter_reveal_12x12.gifx) no-repeat scroll top left;&#13;
}&#13;
.CodeMirror-gutter {&#13;
    cursor: pointer;&#13;
    min-width: 4.0em;&#13;
}&#13;
.CodeMirror-gutter-text pre {&#13;
    padding-left: 20px;&#13;
    text-align: right;&#13;
}&#13;
.CodeMirror-selected {&#13;
    background: #d9d9d9;&#13;
}&#13;
.CodeMirror-focused .CodeMirror-selected {&#13;
    background: #d7d4f0;&#13;
}&#13;
.CodeMirror pre {&#13;
    background-color: transparent;&#13;
}&#13;
&#13;
/*-----------------------------------&#13;
              XPLORE&#13;
-----------------------------------*/&#13;
&#13;
body {&#13;
  font-size: 12px;&#13;
}&#13;
pre {&#13;
  font-size: 11px;&#13;
}&#13;
&#13;
.wrap-pre pre {&#13;
  /* Make Pre tags wrap nicely. Better than having to scroll right for 10000 chars */&#13;
  white-space: pre-wrap;      /* CSS 3 */&#13;
  white-space: -moz-pre-wrap; /* Mozilla, since 1999 */&#13;
  white-space: -pre-wrap;     /* Opera 4-6 */&#13;
  white-space: -o-pre-wrap;   /* Opera 7 */&#13;
  word-wrap: break-word;      /* Internet Explorer 5.5+ */&#13;
}&#13;
&#13;
h5 {&#13;
  font-weight: bold;&#13;
  margin-top: 18px;&#13;
}&#13;
&#13;
#wrapper {&#13;
  overflow: hidden;&#13;
  position: absolute;&#13;
  top: 206px;&#13;
  left: 0;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
  -webkit-box-sizing: border-box;&#13;
  -moz-box-sizing: border-box;&#13;
  box-sizing: border-box;&#13;
}&#13;
&#13;
@media (min-width: 768px) {&#13;
  #wrapper {&#13;
    top: 50px;&#13;
  }&#13;
}&#13;
&#13;
.navbar-nav {&#13;
  margin: 0;&#13;
}&#13;
&#13;
.label-as-badge {&#13;
  border-radius: 1em;&#13;
}&#13;
sup .label-as-badge {&#13;
  padding-bottom: 0.2em;&#13;
}&#13;
&#13;
#side_controls {&#13;
  position: absolute;&#13;
  width: 40px;&#13;
  background: #ecedef;&#13;
  top: 0;&#13;
  bottom: 0;&#13;
  left: 0;&#13;
  border-right: 1px solid #e6e6e6;&#13;
}&#13;
&#13;
#side_controls ul {&#13;
  width: 100%;&#13;
  list-style: none;&#13;
  margin: 0;&#13;
  padding: 0;&#13;
}&#13;
&#13;
#side_controls &gt; ul &gt; li {&#13;
  text-align: center;&#13;
  border-bottom: 1px solid #e0e0e0;&#13;
}&#13;
&#13;
#side_controls &gt; ul &gt; li &gt; a {&#13;
  font-weight: bold;&#13;
  color: #333;&#13;
  text-decoration: none;&#13;
  display: block;&#13;
  position: relative;&#13;
  padding: 15px 0;&#13;
  -webkit-transition: all ease-in 300ms;&#13;
  -moz-transition: all ease-in 300ms;&#13;
  -ms-transition: all ease-in 300ms;&#13;
  -o-transition: all ease-in 300ms;&#13;
  transition: all ease-in 300ms;&#13;
}&#13;
&#13;
#side_controls ul &gt; li &gt; a.active {&#13;
  background: #f9f9f9;&#13;
}&#13;
&#13;
.side_pane {&#13;
  height: 100%;&#13;
  padding: 20px 10px 10px 10px;&#13;
  z-index: 10;&#13;
  position: absolute;&#13;
  left: 40px;&#13;
  top: 0;&#13;
  width: 25%;&#13;
  overflow: auto;&#13;
  background: #f9f9f9;&#13;
  border-right: 1px solid #ccc;&#13;
}&#13;
&#13;
.side_pane ul {&#13;
  list-style-type: square;&#13;
  margin-left: 0;&#13;
  padding-left: 20px;&#13;
}&#13;
&#13;
#workbench {&#13;
  position: absolute;&#13;
  top: 0;&#13;
  left: 40px;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
}&#13;
&#13;
#editor {&#13;
  position: absolute;&#13;
  right: 60%;&#13;
  width: 40%;&#13;
  top: 0;&#13;
  left: 0;&#13;
  bottom: 0;&#13;
  min-width: 100px;&#13;
  border-right: 1px solid #ccc;&#13;
  z-index: 5;&#13;
  background: #fff;&#13;
}&#13;
&#13;
#editor .CodeMirror,&#13;
#editor .CodeMirror-scroll  {&#13;
  height: 100%;&#13;
}&#13;
&#13;
.ui-resizable-handle {&#13;
  position: absolute;&#13;
  font-size: 0.1px;&#13;
  display: block;&#13;
}&#13;
&#13;
.ui-resizable-e {&#13;
  width: 7px;&#13;
  right: -5px;&#13;
  top: 0;&#13;
  height: 100%;&#13;
  cursor: col-resize;&#13;
}&#13;
&#13;
#output {&#13;
  position: absolute;&#13;
  left: 40%;&#13;
  bottom: 0;&#13;
  top: 0;&#13;
  right: 0;&#13;
  background: #fff;&#13;
  overflow: hidden;&#13;
}&#13;
&#13;
#output_content {&#13;
  bottom: 0;&#13;
  left: 0;&#13;
  overflow: hidden;&#13;
  position: absolute;&#13;
  right: 0;&#13;
  top: 0;&#13;
}&#13;
&#13;
#output_tabs {&#13;
  background-color: #f5f5f5;&#13;
}&#13;
&#13;
#output_tabs_pane {&#13;
  position: absolute;&#13;
  top: 40px;&#13;
  left: 0;&#13;
  right: 0;&#13;
  bottom: 0;&#13;
  overflow: auto;&#13;
}&#13;
&#13;
#script_output_tab {&#13;
  padding-top: 10px;&#13;
}&#13;
&#13;
.monospace {&#13;
  font-family: monaco, courier;&#13;
}&#13;
&#13;
.list-example {&#13;
  max-width: 400px;&#13;
}&#13;
&#13;
.tab-pane {&#13;
  padding: 0 15px;&#13;
}&#13;
&#13;
.tab-pane h4 {&#13;
  text-align: left;&#13;
  text-transform: uppercase;&#13;
  border-bottom: 1px solid #ccc;&#13;
}&#13;
.tab-pane .wrap {&#13;
  background-color: #f8f8f8;&#13;
  border: #c4c4c4 1px solid;&#13;
  padding: 15px 0;&#13;
  margin: 15px 0;&#13;
}&#13;
&#13;
#system_log_pane {&#13;
  padding: 0;&#13;
}&#13;
&#13;
#regex_pane .slash {&#13;
  float: left;&#13;
  font-size: large;&#13;
  font-weight: bold;&#13;
  display: block;&#13;
  width: 20px;&#13;
  text-align: center;&#13;
  padding: 5px 0;&#13;
  color: #9a9a9a;&#13;
}&#13;
#regex_expression input {&#13;
  float: left;&#13;
  padding: 4px;&#13;
}&#13;
#regex_pane .regex-options {&#13;
  float: right;&#13;
  width: 70px;&#13;
}&#13;
#regex_options {&#13;
  width: 50px;&#13;
  float: left;&#13;
}&#13;
#regex_pane .regex-expression {&#13;
  padding: 0 70px 0 20px;&#13;
}&#13;
#regex {&#13;
  width: 100%;&#13;
}&#13;
#regex_pane textarea {&#13;
  border: 0;&#13;
  padding: 4px;&#13;
  background: transparent;&#13;
}&#13;
#regex_match, #regex_group {&#13;
  white-space: pre-wrap;&#13;
  word-wrap: break-word;&#13;
}&#13;
#regex_match .bg-success {&#13;
  padding: 2px;&#13;
  color: #066;&#13;
  background-color: #cef;&#13;
}&#13;
&#13;
.page_loader {&#13;
  background-color: rgba(255, 255, 255, 0.9);&#13;
  bottom: 0;&#13;
  display: none;&#13;
  left: 0;&#13;
  position: absolute;&#13;
  right: 0;&#13;
  text-align: center;&#13;
  top: 0;&#13;
  z-index: 50;&#13;
}&#13;
&#13;
.page_loader .loading {&#13;
  bottom: 0;&#13;
  color: #1a1d1d;&#13;
  left: 0;&#13;
  margin: -4rem auto 0;&#13;
  position: absolute;&#13;
  right: 0;&#13;
  text-align: center;&#13;
  top: 50%;&#13;
}&#13;
&#13;
.page_loader .loading i {&#13;
  font-size: 5rem;&#13;
  line-height: 5rem;&#13;
  text-shadow:rgba(255, 255, 255, 0.75) 0 0 0 0.5em;&#13;
}&#13;
&#13;
.page_loader.active {&#13;
  display: block;&#13;
}&#13;
&#13;
#countup {&#13;
  margin-top: 15px;&#13;
}&#13;
&#13;
#output .breadcrumb {&#13;
  margin-bottom: 0;&#13;
}&#13;
&#13;
#type_control {&#13;
  margin: 4px 0 4px 8px&#13;
}&#13;
&#13;
.nav .navbar-control {&#13;
  margin-left: 5px;&#13;
  margin-top: 8px;&#13;
  margin-bottom: 8px;&#13;
}&#13;
&#13;
.table pre {&#13;
  margin: 0;&#13;
}&#13;
&#13;
.log {&#13;
  background-color: #f3f3f3;&#13;
}&#13;
&#13;
.checkbox-inline.no_indent,&#13;
.checkbox-inline.no_indent+.checkbox-inline.no_indent {&#13;
  margin-left: 0;&#13;
  margin-right: 10px;&#13;
}&#13;
.checkbox-inline.no_indent:last-child {&#13;
  margin-right: 0;&#13;
}&#13;
&#13;
#script_pane_list {&#13;
  list-style: none;&#13;
  padding: 0;&#13;
  margin: 0;&#13;
}&#13;
#script_pane_list li {&#13;
  border-top: 1px solid #e9e9e9;&#13;
  padding: 2px 4px;&#13;
}&#13;
#script_pane_list li:hover {&#13;
  background-color: #e9e9e9;&#13;
  padding-left: 6px;&#13;
}&#13;
#script_pane_list li .script-link:hover {&#13;
  cursor: pointer;&#13;
  text-decoration: underline;&#13;
}&#13;
#script_pane_list li .script-replace {&#13;
  opacity: 0;&#13;
  -webkit-transition:all linear 200ms;&#13;
  -moz-transition:all linear 200ms;&#13;
  -ms-transition:all linear 200ms;&#13;
  -o-transition:all linear 200ms;&#13;
  transition: all linear 200ms;&#13;
}&#13;
#script_pane_list li:hover .script-replace {&#13;
  opacity: 1;&#13;
}&#13;
#script_pane_search {&#13;
  margin-bottom: 20px;&#13;
}&#13;
&#13;
.spin {&#13;
  animation: spin 900ms infinite linear;&#13;
  -o-animation: spin 900ms infinite linear;&#13;
  -ms-animation: spin 900ms infinite linear;&#13;
  -webkit-animation: spin 900ms infinite linear;&#13;
  -moz-animation: spin 900ms infinite linear;&#13;
}&#13;
@keyframes spin {&#13;
  100%{ transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-o-keyframes spin {&#13;
  100%{ -o-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-ms-keyframes spin {&#13;
  100%{ -ms-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-webkit-keyframes spin {&#13;
  100%{ -webkit-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
@-moz-keyframes load-spin {&#13;
  100%{ -moz-transform: rotate(360deg); transform: rotate(360deg); }&#13;
}&#13;
&#13;
/* Fix spin offset */&#13;
.glyphicon-refresh.spin {&#13;
  padding-top: 1px;&#13;
}&#13;
.loading&gt;.glyphicon-refresh.spin {&#13;
  padding-left: 1px;&#13;
}&#13;
&#13;
/* Adjust for BootstrapToggle */&#13;
.checkbox, .radio {&#13;
  margin-top: 15px;&#13;
  margin-bottom: 15px;&#13;
}&#13;
&#13;
/* fix IE select */&#13;
select::-ms-expand {&#13;
  display: none;&#13;
}&#13;
&#13;
/* Google Code-Prettify Fix */&#13;
li.L0, li.L1, li.L2, li.L3,&#13;
li.L5, li.L6, li.L7, li.L8&#13;
{ list-style-type: decimal !important }</style><sys_class_name>content_css</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-09-13 14:58:52</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>efd550a80f2a020094f3c09ce1050ecf</sys_id><sys_mod_count>81</sys_mod_count><sys_name>snd_xplore</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>content_css_efd550a80f2a020094f3c09ce1050ecf</sys_update_name><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2016-05-03 17:18:49</sys_updated_on><type>local</type><url/></content_css></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>c36cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>Style Sheet</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_processor_39225f460f66420094f3c09ce1050e91</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_processor"&gt;&lt;sys_processor action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;class_name/&gt;&lt;description&gt;Where the magic happens to generate and run the Xplore UI.&lt;/description&gt;&lt;interactive&gt;false&lt;/interactive&gt;&lt;name&gt;snd_xplore&lt;/name&gt;&lt;parameters/&gt;&lt;params_endpoint/&gt;&lt;path&gt;snd_xplore&lt;/path&gt;&lt;path_endpoint/&gt;&lt;roles/&gt;&lt;script&gt;&lt;![CDATA[/*
  Processor template for quickly generating a stand alone web page
  in ServiceNow. Simply put some well formed HTML in a UI Macro and it
  will be sent to the browser. You can then use the ActionProcessor
  class to have this processor be used as a simple API.

  Created by james@sndeveloper.com 2015-2016
*/
var ui_main = 'snd_xplore_main'; // put your UI Macro name here

/* Boilerplate */
var json = new JSON();
var template = getParam('template');
var action = getParam('action');
var data = getParam('data');

if (!checkRoles()) {
  g_processor.writeOutput('text/plain', 'Error: access restricted.');
}else if (template) {
  HtmlProcessor().sendTemplate(template);
} else if (action) {
  ActionProcessor().process(action, data);
} else {
  HtmlProcessor().sendHtml(ui_main);
}
/* !Boilerplate */

/**
  summary:
    Ensure that we have the necessary roles to run.
**/
function checkRoles() {
  if (gs.getSession().impersonatingUserName) {
    var gr = new GlideRecord('sys_user_has_role');
    gr.addQuery('user.user_name', gs.getImpersonatingUserName());
    gr.addQuery('role.name', 'admin');
    gr.setLimit(1);
    gr.query();
    return gr.hasNext();
  } else {
    return gs.hasRole('admin');
  }
}

function ActionProcessor() {

  /*--- Processor Specific Functions ---*/

  /*
    Write your processing functions here and add corresponding
    switch cases to the process function.
  */

  /**
    summary:
      Get the available scopes
    returns: Array
      Array of ordered scopes, except for global which is the first entry.
  **/
  function getScopes() {
    var gr = new GlideAggregate('sys_scope');
    gr.addQuery('scope', '!=', 'global');
    gr.orderBy('name'); // so we can see name
    gr.orderBy('private');
    gr.groupBy('scope');
    gr.query();
    var scopes = [];
    while (gr.next()) {
      if (gr.scope.toString().indexOf('sn_') === 0) {
        if (gr.getValue('private') != 'false') {
          continue; // easiest way to ignore ServiceNow scopes, Geneva has private flag
        }
      }
      scopes.push({
        name: gr.getValue('name') + ' [' + gr.getValue('scope') + ']',
        scope: gr.getValue('scope')
      });
    }
    scopes.sort(function (a, b) {
      if (a.name &gt; b.name) return 1;
      if (b.name &gt; a.name) return -1;
      return 0;
    });
    scopes.unshift({
      name: 'Global [global]',
      scope: 'global'
    });
    return scopes;
  }

  /**
    summary:
      Evaluate a regular expression against a string
    input: String
      The string to test with the regex.
    expression: String
      The regular expression as a string
    options: String (Optional)
      The regular exression options, e.g. 'g'
    returns: Object
  **/
  function evalRegex(input, expression, options) {
    var regex,
        matches = [],
        groups = [],
        m, a, i,
        loop = options ? options.toString().indexOf('g') &gt;= 0: false;

    if (input &amp;&amp; expression) {
      try {
        regex = new RegExp(expression, options);
      } catch (e) {
        return {
          error: ('' + e).split(':').pop()
        };
      }
      while ((m = regex.exec(input))) {
        matches.push({
          index: m.index,
          length: m[0].length
        });
        // because groups.concat(m) will add the Array as an object instead of its values
        for (i = 1, a = []; i &lt; m.length; i++) {
           a.push(m[i]);
        }
        groups.push(a);
        if (!loop) break;
      }
    }
    return {
      matches: matches,
      groups: groups,
      input: input
    };
  }

  /**
    summary:
      Get basic details of all the tables in the system
    returns: Object
  **/
  function getTables() {
    var tables = {};
    var gr = new GlideRecord('sys_db_object');
    gr.query();
    while (gr.next()) {
      tables[gr.getValue('name')] = {
        super_class:  gr.getValue('super_class'),
        label:        gr.getValue('label'),
        scope:        gr.getValue('sys_scope'),
        sys_id:       gr.getUniqueValue(),
        name:         gr.getValue('name')
      };
    }
    return tables;
  }

  /**
    summary:
      Get records from a table.
    param: table [String]
      The table to search.
    param: fields [Array]
      An array of field names to return.
    param: query [String] Optional
      An encoded query to use to restrict the records.
    param: limit [Integer] Optional
      Limit the number of records returned.
    returns: Array
      An array of record objects containing the requested fields.
  **/
  function getRecordValues(table, fields, query, limit) {
    var records = [],
        gr;

    function mapFields(gr) {
      var o = {};
      for (var i = 0; i &lt; fields.length; i++) {
        var f = fields[i];
        if (f.indexOf('$') == '0') {
          o[f] = gr[f.substr(1)].getDisplayValue();
        } else {
          o[f] = gr.getValue(f);
        }
      }
      return o;
    }

    gr = new GlideRecord(table);
    if (gr.isValid()) {
      gr.addEncodedQuery(query);
      if (limit) {
        gr.setLimit(limit);
      }
      gr._query();
      while (gr._next()) {
        records.push(mapFields(gr));
      }
    }
    return records;
  }

  /*--- End Processor Specific Functions ---*/

  /**
    summary:
      A simple request handler that takes an action and data object.

    action: String
      A keyword that can be used to determine the request.
    data: mixed
      Arbitrary data object for use with processing.
  **/
  function process(action, data) {
    var response;
    var reporter = new snd_XploreReporter();
    try {
      switch (String(action)) {
        /*
          Write your switch code here for requests
          See parseJsonData for using POST data
        */
        case 'logs':
          reporter.getOutputMessages();
          reporter.getLogs();
          response = responseFactory(true, reporter.getResponse());
          break;
        case 'regex':
          data = parseJsonData(data);
          response = responseFactory(true, evalRegex(data.input, data.expression, data.options));
          break;
        case 'run':
          var runner = new XploreRunner();
          data = parseJsonData(data);
          if (!data) {
            gs.addErrorMessage('Invalid HTTP data object.');
            reporter.getOutputMessages();
            response = responseFactory(true, reporter.getResponse());
          } else {
            runner.setReporter(reporter);
            response = runner.run(data);
          }
          break;
        case 'getScopes':
          response = responseFactory(true, getScopes());
          break;
        case 'getTables':
          response = responseFactory(true, getTables());
          break;
        case 'getTableHierarchy':
          data = {
            search_label: getParam('search_labels')
          };
          data.search_label = data.search_label == '1' || data.search_label == 'true';
          response = responseFactory(true, XploreTableHierarchy(getParam('table'), data));
          break;
        case 'getScripts':
          response = responseFactory(true, getRecordValues(
            'sys_script_include', ['sys_id', 'name', 'api_name', '$sys_scope'], 'ORDERBYname^EQ'));
          break;
        case 'getScript':
          data = getParam('sys_id');
          if (data.length == 32) {
            var records = getRecordValues(
              'sys_script_include', ['name', 'api_name', 'script'], 'sys_id=' + data, 1);
            if (records.length) {
              response = responseFactory(true, records[0]);
            } else {
              throw 'Not found.';
            }
          } else {
            throw 'Expected sys_id not valid.';
          }
          break;
        default:
          throw 'Invalid request.';
      }
    } catch (e) {
      response = responseFactory(false, e.toString());
    }
    if (!response) response = responseFactory(false, {message: 'Nothing returned.'});
    g_processor.writeOutput('application/json', json.encode(response));
  }

  /**
    summary:
      Create a standardised response object to send back to the client.

    success: Boolean
      Was the request successful
    options: Object
      An object containing your data to return to the client.
      Parameters `success` and `message` are always returned.
      If it is a failure response, options can be a string of the error
      and it will be converted into the message property.
    returns: Object
  **/
  function responseFactory(success, options) {
    if (!success &amp;&amp; typeof options == 'string') {
      return {
        success: false,
        message: options
      };
    }
    if (!options) options = {};
    options.success = !!success;
    if (!options.message) options.message = '';
    return options;
  }

  /**
    summary:
      Wrapper function for parsing JSON input.

    description:
      When making HTTP POST calls from a client, you must make sure that
      you pass as multipart encoded params. This is an object with a
      data property containing JSON.stringify(your_object).
      If you try and assign your object directly to the POST body, it will
      not be processed correctly* by ServiceNow. Tested in Fuji.

      * Need to validate this in the client when using $http or $.ajax, etc
        ? data: my_obj
        ? data: JSON.stringify(my_obj)
        works ==&gt; data: {data: JSON.stringify(my_obj)}

      *jQuery: data: { data: JSON.stringify(my_obj)}
      *Angular: params: {data: JSON.stringify(my_obj)}

    data: mixed
    returns: mixed
      assuming data has a data property, returns JSON parse result
      otherwise returns the given parameter

  **/
  function parseJsonData(data) {
    if (data &amp;&amp; data.data) {
      return json.decode(data.data);
    }
    return json.decode(data);
  }

  /**
    summary:
      Get a record set.

    table: String
      The table to run the query on.
    query: String
      An encoded query string.
    limit: Number (Optional)
      Provide a limit to restrict the record count - i.e. for a single record lookup.

    returns: GlideRecord
  **/
  function getRecords(table, query, limit) {
    var gr = new GlideRecord(table);
    gr.addEncodedQuery(query);
    if (limit) gr.setLimit(limit);
    gr.query();
    return gr;
  }

  return {
    process: process
  };
}


/*
  You shouldn't need to edit below this.
*/
function HtmlProcessor() {

  /**
    summary:
      Get an UI macro and write the output to the response stream.

    name: String
      The name of the UI Macro that has your HTML
  **/
  function sendTemplate(name) {
    var html = _getMacro(name);
    if (!html) return;
    g_processor.writeOutput('text/html', html);
  }

  /**
    summary:
      Get an UI macro and write the output to the response stream.
      Prefix with a doctype for an HTML webpage template.

    name: String
      The name of the UI Macro that has your HTML
  **/
  function sendHtml(name) {
    var html = _getMacro(name);
    if (!html) return;
    // cannot add doctype anywhere else
    g_processor.writeOutput('text/html', '&lt;!doctype html&gt;' + html);
  }

  /**
    summary:
      Helper function to process a macro.

    name: String
      The name of the macro to get.

    returns: String or false on error.
  **/
  function _getMacro(name) {
    var gr = new GlideRecord('sys_ui_macro');
    gr.addQuery('name', '=', name);
    gr.setLimit(1);
    gr.query();
    if (gr.next()) {
      var xml = runJellyScript(gr.xml);
      return setScriptVersions(xml);
    }
    g_processor.writeOutput('text/plain', 'Missing required UI Macro: ' + name);
    return false;
  }

  /**
    summary:
      Run a Jelly script.
    description:
      Takes an XML Jelly script and runs it with
      variables.
    jelly: String
      A jelly script to run.
    vars: Object (Optional)
      An object of name-value pairs to use in the
      Jelly script. The jelly script will need to
      prefix the names with 'jvar_'.
    returns: String
      The processed Jelly script.
  **/
  function runJellyScript(jelly, vars) {
    var runner = new GlideJellyRunner();
    if (typeof vars === 'object') {
      for (var name in vars) {
        runner.setVariable('jvar_' + name, vars[name]);
      }
    }
    return runner.run(jelly);
  }

  /**
    summary:
      Looks for 'variables' in text and replaces them with those in an object
      should they exist.

    str: String
      The string that contains the variables in the format ${variableName}
    varObj: Object (Optional)
      The object containing the key-value pairs for the variables to replace.
      Providing no object will just return the original string.

    returns: String
  **/
  function replaceVars(str, varObj) {
    if (typeof varObj == 'object') {
      str = str.replace(/\$\{\s*(\w+)\s*\}/g, function (m, word) {
        return varObj[word] || m;
      });
    }
    return str;
  }

  /**
    summary:
      Parses HTML for js and css file references and appends a cache time.

    description:
      Processes an HTML string for references to database UI Scripts and
      Stylesheets and automatically gets them and appends their timestamp
      for proper caching.

      This means you can simply write:
        &lt;script src="my_ui_script.jsdbx"&gt;&lt;/script&gt;
      and this function will convert it to
        &lt;script src="/my_ui_script.jsdbx?ssv=1443571200"&gt;&lt;/script&gt;

      It does the same to css:
        &lt;link href="/1a156ce10f574a0094f3c09ce1050e70.cssdbx" rel="stylesheet"&gt;&lt;/link&gt;
      becomes
        &lt;link href="/1a156ce10f574a0094f3c09ce1050e70.cssdbx?ssv=1356048000" rel="stylesheet"&gt;&lt;/link&gt;

    html: String

    returns: {String}

  **/
  function setScriptVersions(html) {

    // get the updated time of the script
    function getTime(table, key, val) {
      var gr = new GlideRecord(table);
      gr.addQuery(key, '=', val);
      gr.setLimit(1);
      gr.query();
      return gr.next() ? new GlideDateTime(gr.sys_updated_on).getNumericValue() : '';
    }

    // replace a specific part of a string with something else
    function replacePart(str, i, what, len) {
      return str.substr(0, i) + what + str.substr(i + (len || what.length));
    }

    var regexp = /([a-zA-Z0-9_.]*)\.(css|js)dbx/g;

    var dict = {
      'js':  {table: 'sys_ui_script', key: 'name'},
      'css': {table: 'content_css',   key: 'sys_id'}
    };

    var m, t, ref;
    while ((m = regexp.exec(html))) {
      ref = dict[m[2]];
      t = getTime(ref.table, ref.key, m[1]);
      html = replacePart(html, m.index, m[0] + '?ssv=' + t, m[0].length);
    }
    return html;
  }

  return {
    sendHtml: sendHtml,
    sendTemplate: sendTemplate
  };
}

/**
  summary:
    Safe wrapper for getting parameters to prevent false positives
  name: String
    The name of the parameter
**/
function getParam(name) {
  return (g_request.getParameter(name) || '') + '';
}

/**
  summary:
    Container class for running an exploratory programming request.
**/
function XploreRunner() {

  // #private: the current transaction
  var transaction;

  // #protected: the reporter to use
  var reporter;
  this.setReporter = function (obj) {
    reporter = obj;
  };
  this.getReporter  = function () {
    return reporter;
  };

  /**
    summary:
      capture calls to gs.print and enable debug for this session
  **/
  function start() {
    transaction = GlideTransaction.get();
    GlideSessionDebug.enable(transaction);
  }

  /**
    summary:
      stop the debug session for this transaction
  **/
  function stop() {
    if (transaction) GlideSessionDebug.disable(transaction);
  }

  /**
    summary:
      Log the code in syslog if necessary (like background script does)
  **/
  function logRequest(code, scope) {
    if (gs.getProperty('snd_xplore.log_request', 'true') == 'true') {
      gs.log('Xplore Request [' + (scope || 'global') + ']:\n' + code, 'SND Xplore');
    }
  }

  /**
    summary:
      Gets the lines of some text, e.g. code. Useful for showing errors.
    text: String
      The text to pull the lines from.
    at: Number
      The line number to highlight.
    span: Number
      The number of lines to add either side of the target line.
   **/
  function getLines(text, at, span) {
    var lines = text.split('\n');
    var result = [], i;

    function pre(i) {
      return i + 1 + ': ';
    }

    if (lines.length &gt;= at) {
      at--; // account for base 0;
      for (i = (at - span); i &lt; at; i++ ) {
        result.push(pre(i) + lines[i]);
      }
      result.push('=&gt; ' + pre(at) + lines[at]);
      for (i = (at + 1); i &lt;= (at + span) &amp;&amp; i &lt; lines.length; i++) {
        result.push(pre(i) + lines[i]);
      }
    }

    return result;
  }

  /**
    summary:
      Attempt to dotwalk a given object's properties.
    obj: Object
      The object to dotwalk.
    path: String
      The property path to walk, in dot notation: foo.bar.tan
    returns: mixed
      The property at the end of the chain.
    throws: Error
  **/
  function dotwalk(obj, path) {
    var pathArr = path.split('.');
    var o = obj;
    try {
      for (var i = 0; i &lt; pathArr.length; i++) {
        path = pathArr[i];
        if (path.indexOf('()') &gt; 0) {
          o = o[path.substr(0, path.length - 2)]();
        } else {
          o = o[path];
        }
      }
    } catch (e) {
      throw 'Unable to navigate breadcrumb: ' + e;
    }
    return o;
  }

  /**
    summary:
      Validate the script to run for any syntax errors.
    returns: true
    throws: string
  **/
  function validateScript(script) {
    var error = GlideSystemUtilScript._getScriptError(script);
    if (error) {
      var e = new SyntaxError(error);
      var m = error.match(/(.+) at line \((\d+)\) column \((\d+)\) problem = (.+)/);
      if (m) {
        e.name = m[4];
        e.lineNumber = m[2];
        e.column = m[3];
      }
      throw e;
    }
    return true;
  }

  /**
    summary:
      Handle an exception to see if there is a line number we can use.
    e: mixed
      The error object
    code: String
      The code that generated the exception.
    returns: Boolean
      True if the error was explainable, false if not.
      This just means that we can forward the error to xplore if we like.
  **/
  function handleException(e, code) {
    var errorStr = 'Exception thrown. ' + e;
    var lines, isUnknown = true;
    if (typeof e.lineNumber === 'string') {
      lines = getLines(code, parseInt(e.lineNumber, 10), 2);
      if (lines.length) {
        errorStr += '&lt;br /&gt;' + lines.join('&lt;br /&gt;').replace(' ', '&amp;nbsp;');
        isUnknown = false;
      }
    }
    gs.addErrorMessage(errorStr);
    return isUnknown;
  }

  /**
    summary:
      Run Xplore on a script in the global environment
    script: String
      The script to evaluate
    options: Object
      An object of options
  **/
  function runScript(script, options) {
    // try to catch exceptions here - this won't catch all exceptions
    // newlines will affect the exception lineNumber
    script = 'try {' + script + '\n} catch (e) { e; }';
    var result = GlideEvaluator.evaluateString(script);
    if (result !== null &amp;&amp; options.breadcrumb) {
      result = dotwalk(result, options.breadcrumb);
    }
    snd_xplore(result, reporter, options);
  }

  /**
    summary:
      Run Xplore on a script in a scoped environment
    script: String
      The script to evaluate
    options: Object
      An object of options
  **/
  function runScopedScript(script, options) {

    var scopeId = (function (scopeName) {
      if (scopeName == 'global') return '';
      var gr = new GlideRecord('sys_scope');
      gr.addQuery('scope', '=', scopeName);
      gr.setLimit(1);
      gr.query();
      if (gr.next()) {
        return gr.getUniqueValue();
      }
      throw 'Unknown scope [' + scopeName + ']';
    })(options.scope);

    var tryScript = '"try {" + script + "} catch (e) { e; }"';
    var scopedScript = dotwalk.toString() + ';\n';

    scopedScript += 'var gr = new GlideRecord("sys_script_include");\n';
    scopedScript += 'gr.name = "XploreTempScopedScript";\n';
    scopedScript += 'gr.api_name = "' + options.scope + '.XploreTempScopedScript";\n';
    scopedScript += 'gr.sys_scope = "' + scopeId + '";\n';
    scopedScript += 'gr.script = ' + tryScript + ';\n';
    scopedScript += 'try {\n';
    scopedScript += 'var gse = new GlideScopedEvaluator();\n';
    scopedScript += 'var result = gse.evaluateScript(gr, "script");\n';
    if (options.breadcrumb) {
      scopedScript += 'if (result != null) {\nresult = dotwalk(result, "' + options.breadcrumb + '");\n}\n';
    }
    scopedScript += '} catch (e) { result = e; }\n';

    scopedScript += 'var options = ' + json.encode(options) + ';\n';
    scopedScript += 'global.snd_xplore(result, reporter, options);\n';

    try {
      validateScript(scopedScript);
    } catch (e) {
      e.name = 'Scoped Script Generation SyntaxError';
      throw handleException(e, scopedScript);
    }

    var gr = new GlideRecord('sys_script_include');
    gr.name = 'XploreTempScopedScriptRunner';
    gr.api_name = gr.name;
    gr.script = scopedScript;
    gr.sys_scope = scopeId;
    var gse = new GlideScopedEvaluator();
    gse.putVariable('reporter', reporter);
    gse.putVariable('script', script);
    gse.putVariable('user_data', options.user_data);
    gse.evaluateScript(gr, 'script');
  }

  /**
    summary:
      Process a request.
    options: Object
      An object that contains the things we need to process the request.
        code: String
          The code to execute.
        breadcrumb: String
          List of dot separated property names to evaluate on the result.
    returns: Object
      The snd_XploreReporter response object.
  **/
  this.run = function (options) {
    var script = options ? options.code : '';

    function end() {
      reporter.getOutputMessages();
      stop();
      return reporter.getResponse();
    }

    if (!options) {
      gs.addErrorMessage('Xplore processor did not receive a request.');
      return end();
    }

    if (!reporter) {
      throw 'XploreRunner requires an appropriate reporter to be given.';
    }

    start();

    if (!script) {
      gs.addErrorMessage("Expression required.");
      return end();
    }

    try {
      validateScript(script);
      logRequest(script, options.scope);
      global.user_data = options.user_data;

      if (options.scope &amp;&amp; options.scope != 'global') {
        runScopedScript(script, options);
      } else {
        runScript(script, options);
      }
    } catch (e) {
      snd_xplore(e, reporter);
    }

    return end();
  };
}

/**
  summary:
    Xplore table helper
**/
function XploreTableHierarchy(table, options) {

  // The maximum number of table extensions we will handle
  var MAX_DEPTH = 25;

  var SEARCH_LABEL =  options ? !!options.search_label : false;

  /**
    summary:
      Get the hierarchy of a given table or all the tables.
    description:
      Builds an multi-dimensional array of objects, where each
      object represents a base table. Each object can have children
      and the children can also have children.
      The object also contains details of the table.
    table: String (Optional)
      The table to get the Hierarchy for. Providing no table
      will result in the entire table hierarchy being processed.
    returns: Array
  **/
  function getHierarchy(table) {
    var info,
      hierarchy,
      data = {};

    if (!table) throw 'Invalid table.';

    info = getTableInfo(table, SEARCH_LABEL);
    hierarchy = [];
    hierarchyLookup = {};
    data.names = getSortedKeys(info);

    // loop until we have no more tables to check
    eachArr(Array(MAX_DEPTH), function () {
      var nextNames = []; // process these names on the next iteration
      eachArr(data.names, function (i, name) {
        var dbo = info[name];
        /*dbo.toString = function () {
          return this.super_class + '.' + this.name;
        };*/
        if (!dbo.super_class) {
          // this is a base class
          dbo.children = []; // add a place for the children to go
          hierarchy.push(dbo); // add to our hierarchy
          hierarchyLookup[dbo.sys_id] = dbo;
        } else if (hierarchyLookup[dbo.super_class] !== undefined) {
          // this is an extension and it's parent has already been processed
          dbo.children = []; // children can have children
          hierarchyLookup[dbo.sys_id] = dbo;
          hierarchyLookup[dbo.super_class].children.push(dbo);
        } else {
          // process on next iteration
          nextNames.push(name);
        }
      });
      if (!nextNames.length) return false;
      data.names = nextNames;
    });

    return hierarchy;
  }

  /**
    summary:
      Get table details hierarchy information from sys_db_object.
    table: String (Optional)
      Look for details of all tables in this table's heirarchy.
      Not providing this parameter will return details of all tables.
    returns: Object
      An 2D object where each key is the name of the table and the
      value is an object containing a copy of the sys_db_object data.
  **/
  function getTableInfo(table, searchLabel) {
    var required, matchTable, matcher;

    matchTable = (function (t) {
      var c = t.substr(0,1);
      if (c === '*') {
        t = t.substr(1); // contains
      } else if (c === '=') {
        t = '^' + t.substr(1) + '$'; // equals
      } else {
        t = '^' + t; // starts with
      }
      return t;
    })(table);
    matcher = new RegExp(matchTable, 'i');

    // Is the user looking for all tables?
    if (table == '*' || table == 'ALL') table = '';

    // Looking for all tables or a specific one
    if (!table || table.substr(0,1) === '=') {

      // remove the prefixed equal sign
      if (table) table = table.substr(1);

      if (searchLabel) {

        // Get the table object from its label
        required = getDbObjectByLabel(table);
      } else {

        // Get the table object from its name, or ALL table objects if table = ''
        required = getDbObject(table);
      }

    } else {

      // match on table is required, so get all tables and match
      required = {};
      eachObj(getDbObject(), function (name, obj) {
        var match = searchLabel ? obj.label.match(matcher) : name.match(matcher);
        if (match) {
          eachObj(getDbObject(name), function (name, obj) {
            required[name] = required[name] || obj;
          });
        }
      });

    }

    return required;
  }

  /**
    summary:
      Get an object of objects containing sys_db_object info
    param: label [String]
    returns: Object
  **/
  var getDbObjectByLabel = function (label) {
    var result = {};
    var gr = new GlideRecord('sys_db_object');
    gr.addQuery('label', '=', label);
    gr.setLimit(1);
    gr.query();
    if (gr.next()) {
      return getDbObject(gr.name);
    } else {
      throw 'Invalid table label: ' + label;
    }
  };

  /**
    summary:
      Get an object of objects containing sys_db_object info
    param: table [String]
    returns: Object
  **/
  var getDbObject = (function () {
    var dbo = GlideDBObjectManager.get();
    return function (table) {
      var result = {};
      var gr = new GlideRecord('sys_db_object');
      if (table) {
        gr.addQuery('name', 'IN', dbo.getHierarchy(table).toArray().join(','));
      }
      gr.query();
      if (!gr.hasNext()) {
        throw 'Invalid table name: ' + table;
      }
      while (gr.next()) {
        result[gr.getValue('name')] = info(gr);
      }
      return result;
    };
  })();

  function info(gr) {
    return {
      super_class: gr.getValue('super_class'),
      label: gr.getValue('label'),
      scope: gr.getValue('sys_scope'),
      sys_id: gr.getUniqueValue(),
      name: gr.getValue('name')
    };
  }

  /**
    summary:
      Helper function: loop through arrays
    arr: Array
      The array to loop through.
    fn: Function
      Callback function being given two parameters: index
      and current array item.
      Returning false will cancel the iteration.
  **/
  function eachArr(arr, fn) {
    var len = arr.length;
    for (var i = 0; i &lt; len; i++) {
      if (fn(i, arr[i]) === false) {
        break;
      }
    }
  }

  /**
    summary:
      Helper function: loop through objects
    param: o [Object]
    param: fn [Function]
      Callback function being given two parameters: key and current object property.
      Returning false will cancel the iteration.
  **/
  function eachObj(o, fn) {
    for (var k in o) {
      if (fn(k, o[k]) === false) {
        break;
      }
    }
  }

  /**
    summary:
      Helper function: get an array of an objects' sorted property names
    obj: Object
    returns: Array
  **/
  function getSortedKeys(obj) {
    var keys = [];
    for (var key in obj) {
      keys.push(key);
    }
    keys.sort();
    return keys;
  }

  return getHierarchy(table);
}]]&gt;&lt;/script&gt;&lt;sys_class_name&gt;sys_processor&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@snd&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2015-09-18 20:32:13&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;39225f460f66420094f3c09ce1050e91&lt;/sys_id&gt;&lt;sys_mod_count&gt;320&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore&lt;/sys_name&gt;&lt;sys_package display_value="Global" source="global"&gt;global&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Xplore"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_processor_39225f460f66420094f3c09ce1050e91&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@sndeveloper.com&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2016-05-03 17:36:48&lt;/sys_updated_on&gt;&lt;type&gt;script&lt;/type&gt;&lt;/sys_processor&gt;&lt;/record_update&gt;</payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>c76cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore</target_name>
<type>Processor</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_macro_b6e5deb30f5d528094f3c09ce1050e71</name>
<payload>&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;record_update table="sys_ui_macro"&gt;&lt;sys_ui_macro action="INSERT_OR_UPDATE"&gt;&lt;active&gt;true&lt;/active&gt;&lt;category&gt;general&lt;/category&gt;&lt;description/&gt;&lt;media_type/&gt;&lt;name&gt;snd_xplore_info&lt;/name&gt;&lt;scoped_name/&gt;&lt;sys_class_name&gt;sys_ui_macro&lt;/sys_class_name&gt;&lt;sys_created_by&gt;james@sndeveloper.com&lt;/sys_created_by&gt;&lt;sys_created_on&gt;2016-02-07 19:31:05&lt;/sys_created_on&gt;&lt;sys_customer_update&gt;true&lt;/sys_customer_update&gt;&lt;sys_id&gt;b6e5deb30f5d528094f3c09ce1050e71&lt;/sys_id&gt;&lt;sys_mod_count&gt;34&lt;/sys_mod_count&gt;&lt;sys_name&gt;snd_xplore_info&lt;/sys_name&gt;&lt;sys_package display_value="Xplore" source="0f6ab99a0f36060094f3c09ce1050ee8"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_package&gt;&lt;sys_policy/&gt;&lt;sys_replace_on_upgrade&gt;false&lt;/sys_replace_on_upgrade&gt;&lt;sys_scope display_value="Xplore"&gt;0f6ab99a0f36060094f3c09ce1050ee8&lt;/sys_scope&gt;&lt;sys_update_name&gt;sys_ui_macro_b6e5deb30f5d528094f3c09ce1050e71&lt;/sys_update_name&gt;&lt;sys_updated_by&gt;james@sndeveloper.com&lt;/sys_updated_by&gt;&lt;sys_updated_on&gt;2016-05-03 10:47:38&lt;/sys_updated_on&gt;&lt;xml&gt;&lt;![CDATA[&lt;?xml version="1.0" encoding="utf-8" ?&gt;
&lt;j:jelly trim="false" xmlns:j="jelly:core" xmlns:g="glide" xmlns:j2="null" xmlns:g2="null"&gt;
&lt;div class="row" style="margin-top: 12px; font-size: 14px;"&gt;

  &lt;div class="col-xs-12"&gt;

    &lt;div class="alert alert-danger"&gt;
      &lt;strong&gt;Warning:&lt;/strong&gt; This utility runs code in your
      environment. Make sure you know what you are doing as it is
      entirely possible for you to screw up your instance.
    &lt;/div&gt;

    &lt;div class="panel panel-default"&gt;
      &lt;div class="panel-heading" role="tab"&gt;
        &lt;h4 class="panel-title"&gt;
          &lt;a href="#info_welcome" role="button" data-toggle="collapse"&gt;WELCOME!&lt;/a&gt;
        &lt;/h4&gt;
      &lt;/div&gt;
      &lt;div id="info_welcome" class="panel-collapse collapse in" role="tabpanel"&gt;
        &lt;div class="panel-body"&gt;
          &lt;p&gt;Hey! Thanks for downloading Xplore.&lt;/p&gt;
          &lt;p&gt;Xplore is a free, independently developed utility for ServiceNow that
            has been built 'for developers, by developers'. We really appreciate
            all the community input we get!&lt;/p&gt;

          &lt;p&gt;&lt;strong&gt;Ways you can help!&lt;/strong&gt;
            &lt;ul class="list-group list-example"&gt;
              &lt;li class="list-group-item"&gt;
                &lt;a href="https://share.servicenow.com/app.do#/search-result?search_query=sndeveloper${AMP}startRow=NaN${AMP}sort_parameter=title"
                  target="_blank"&gt;
                  &lt;span class="glyphicon glyphicon-thumbs-up"&gt;&lt;/span&gt;
                  Write a review or download our other apps&lt;/a&gt;
              &lt;/li&gt;
              &lt;li class="list-group-item"&gt;
                &lt;a href="https://github.com/sn-developer/Xplore" target="_blank"&gt;
                &lt;span class="glyphicon glyphicon-wrench"&gt;&lt;/span&gt;
                Contribute on GitHub&lt;/a&gt;
              &lt;/li&gt;
              &lt;li class="list-group-item"&gt;
                &lt;a href="mailto:info@sndeveloper.com?subject=Xplore Feedback"&gt;
                  &lt;span class="glyphicon glyphicon-envelope"&gt;&lt;/span&gt;
                  Say hello!&lt;/a&gt;
              &lt;/li&gt;
            &lt;/ul&gt;
          &lt;/p&gt;

          &lt;p&gt;Thanks!&lt;/p&gt;
          &lt;p&gt;&lt;a href="https://twitter.com/James_Neale" target="_blank"&gt;James&lt;/a&gt;
          and
          &lt;a href="https://twitter.com/simthort" target="_blank"&gt;Tim&lt;/a&gt;
          &lt;/p&gt;

          &lt;p class="small"&gt;
            &lt;a href="https://twitter.com/intent/tweet?button_hashtag=Xplore${AMP}text=My%20job%20as%20a%20%23servicenowdev%20just%20got%20a%20lot%20easier!%20%40sn_developer" class="twitter-hashtag-button" data-related="sn_developer" data-url="https://goo.gl/fAyYTA" target="_blank"&gt;Tweet #Xplore&lt;/a&gt;
            |
            &lt;a href="https://twitter.com/sn_developer" class="twitter-follow-button"
            data-show-count="false" target="_blank"&gt;Follow @sn_developer&lt;/a&gt;
            |
            &lt;a href="https://www.linkedin.com/company/sn-developer" target="_blank"&gt;Find us on LinkedIn&lt;/a&gt;
          &lt;/p&gt;

        &lt;/div&gt;
      &lt;/div&gt;
    &lt;/div&gt;

    &lt;div class="panel-group" id="info_accordion" role="tablist"&gt;

      &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading" role="tab"&gt;
          &lt;h4 class="panel-title"&gt;
            &lt;a href="#info_script_editor" role="button" data-toggle="collapse"
              data-parent="#info_accordion"&gt;SCRIPT EDITOR&lt;/a&gt;
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div id="info_script_editor" class="panel-collapse collapse in" role="tabpanel"&gt;
          &lt;div class="panel-body"&gt;
            &lt;p&gt;Use the script editor on the left to write and run scripts
              in ServiceNow, much like a background script, but
              supercharged. The last object in the script will be shown
              here in a detailed output tab.&lt;/p&gt;
           &lt;p&gt;Use the choice list to choose where you want to run your
              code, either server or client.&lt;/p&gt;
            &lt;p&gt;Launching Xplore from within ServiceNow will give you
              access to the various frames ServiceNow uses.&lt;/p&gt;
            &lt;p&gt;
              Not sure what to do? Try one of these demos:
              &lt;div class="list-group xplore_demo list-example"&gt;
                &lt;a data-demo="GlideRecord" href="#demo"
                  class="list-group-item list-group-item-info"&gt;Demo: GlideRecord&lt;/a&gt;
                &lt;a data-demo="Array" href="#demo"
                  class="list-group-item list-group-item-info"&gt;Demo: Array&lt;/a&gt;
                &lt;a data-demo="GlideUser" href="#demo"
                  class="list-group-item list-group-item-info"&gt;Demo: GlideUser&lt;/a&gt;
                &lt;a data-demo="Logging" href="#demo"
                  class="list-group-item list-group-item-info"&gt;Demo: Logging and Messages&lt;/a&gt;
                &lt;a data-demo="scope" href="#demo"
                  class="list-group-item list-group-item-info"&gt;Demo: Current scope&lt;/a&gt;
              &lt;/div&gt;
            &lt;/p&gt;
            &lt;p class="alert alert-warning"&gt;Tip: Use the keyboard shortcut
              &lt;kbd&gt;Ctrl + Enter&lt;/kbd&gt; to run.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading" role="tab"&gt;
          &lt;h4 class="panel-title"&gt;
            &lt;a href="#info_user_data" role="button" data-toggle="collapse"
              data-parent="#info_accordion"&gt;USER DATA&lt;/a&gt;
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div id="info_user_data" class="panel-collapse collapse" role="tabpanel"&gt;
          &lt;div class="panel-body"&gt;
            &lt;p&gt;Paste in large chunks of text like XML and work with
              them in your script.&lt;/p&gt;
            &lt;div class="list-group xplore_demo list-example"&gt;
              &lt;a data-demo="user_data" href="#demo"
                class="list-group-item list-group-item-info"&gt;Demo: Format XML&lt;/a&gt;
            &lt;/div&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading" role="tab"&gt;
          &lt;h4 class="panel-title"&gt;
            &lt;a href="#info_regex" role="button" data-toggle="collapse"
              data-parent="#info_accordion"&gt;REGEX&lt;/a&gt;
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div id="info_regex" class="panel-collapse collapse" role="tabpanel"&gt;
          &lt;div class="panel-body"&gt;
            &lt;p&gt;You can test out regular expressions natively in ServiceNow!&lt;/p&gt;
            &lt;p&gt;If you've done any work with regular expressions then you will know
              that sometimes regular expressions don't work the same way
              in ServiceNow as they do in browsers or other languages.&lt;/p&gt;
            &lt;p&gt;Simply type in your expression and a test string, give
              it a second, and it will automatically test your expression
              for you and show you the results - including the match groupings.&lt;/p&gt;
            &lt;p class="alert alert-warning"&gt;Tip: Change to 'Client' to test an
              expression in your browser.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading" role="tab"&gt;
          &lt;h4 class="panel-title"&gt;
            &lt;a href="#info_table_hierarchy" role="button" data-toggle="collapse"
              data-parent="#info_accordion"&gt;TABLE HIERARCHY&lt;/a&gt;
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div id="info_table_hierarchy" class="panel-collapse collapse"
          role="tabpanel"&gt;
          &lt;div class="panel-body"&gt;
            &lt;p&gt;The table hierarchy tool allows you to view the hiearchy
              of a table in an interactive view.&lt;/p&gt;
            &lt;p&gt;Type in the name or label of a table you are interested
              in and hit &lt;kbd&gt;Enter&lt;/kbd&gt;&lt;/p&gt;
            &lt;p&gt;Navigate through the hierarchy (very useful for things
              like cmdb_ci) and use handy links to open the list or
              form view of any table.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading" role="tab"&gt;
          &lt;h4 class="panel-title"&gt;
            &lt;a href="#info_logs" role="button" data-toggle="collapse"
              data-parent="#info_accordion"&gt;SYSTEM LOGS&lt;/a&gt;
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div id="info_logs" class="panel-collapse collapse" role="tabpanel"&gt;
          &lt;div class="panel-body"&gt;
            &lt;p&gt;The system log is now embedded into Xplore for easy access.&lt;/p&gt;
            &lt;p class="alert alert-warning"&gt;Tip: Double-clicking the 'Logs' tab
            will automatically reset the log window.&lt;/p&gt;
          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

      &lt;div class="panel panel-default"&gt;
        &lt;div class="panel-heading" role="tab"&gt;
          &lt;h4 class="panel-title"&gt;
            &lt;a href="#info_tips" role="button" data-toggle="collapse"
              data-parent="#info_accordion"&gt;TIPS&lt;/a&gt;
          &lt;/h4&gt;
        &lt;/div&gt;
        &lt;div id="info_tips" class="panel-collapse collapse" role="tabpanel"&gt;
          &lt;div class="panel-body"&gt;
            &lt;h4&gt;Logging&lt;/h4&gt;
            &lt;p&gt;Xplore supports capturing server messages using the
              following native ServiceNow logging functions:&lt;/p&gt;
            &lt;ul class="list-example"&gt;
              &lt;li&gt;&lt;code&gt;gs.log("Hello world")&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code&gt;gs.print("Hello world")&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code&gt;gs.info("Hello world")&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code&gt;gs.warn("Hello world")&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code&gt;gs.error("Hello world")&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code&gt;gs.addInfoMessage("Hello world")&lt;/code&gt;&lt;/li&gt;
              &lt;li&gt;&lt;code&gt;gs.addErrorMessage("Hello world")&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;
            &lt;p&gt;Some server exceptions result in the transaction being aborted by
              ServiceNow which means you will have limited (if any) output.
              Xplore helps with this by automatically retrieving
              the session log statements that were generated up to the time of the error
             (using the functions shown above) and showing them in the output pane.
            &lt;/p&gt;

            &lt;p&gt;Client side logs can be captured as well:&lt;/p&gt;
            &lt;ul class="list-example"&gt;
              &lt;li&gt;&lt;code&gt;jslog("Hello world")&lt;/code&gt;&lt;/li&gt;
            &lt;/ul&gt;

            &lt;h4&gt;Script Include&lt;/h4&gt;
            &lt;p&gt;Xplore is based on a global Script Include that you can
              run anywhere in ServiceNow.&lt;/p&gt;

            &lt;h5&gt;snd_xplore(obj)&lt;/h5&gt;
            &lt;p class="col-xs-12"&gt;Uses the default reporter to print everything using gs.print()&lt;/p&gt;

            &lt;h5&gt;snd_xplore.lookAt(obj)&lt;/h5&gt;
            &lt;p class="col-xs-12"&gt;Get an object containing the properties 'type' and
              'value' of your object.&lt;/p&gt;

            &lt;h5&gt;snd_xplore(obj, my_reporter)&lt;/h5&gt;
            &lt;p class="col-xs-12"&gt;You can also write your own reporter to handle the output
              of snd_xplore.
              Check out the snd_xplore Script Include for the built in print_reporter
              which works in both global and scoped apps. This page uses a custom
              print reporter to generate JSON and package it all back to the client
              over AJAX.&lt;/p&gt;

            &lt;h5&gt;snd_xplore.test(obj)&lt;/h5&gt;
            &lt;p class="col-xs-12"&gt;Sometimes when you are 'Xploring' an object, you
              will come across properties that throw exceptions when you try to
              read their value. You can bypass this property by updating the
              Xplore Red List on the fly, or add the property to the
              'redlist' array in the snd_xplore Script Include.&lt;/p&gt;

            &lt;h5&gt;snd_xplore.blacklist('illegalProp')&lt;/h5&gt;
            &lt;p class="col-xs-12"&gt;Blacklisted properties are those that throw illegal
              access exceptions. ServiceNow don't even want you trying to access these,
              let alone see their value. Xplore has a built in template to filter the
              majority of these, but sometimes they will slip through. Bypass these
              properties on the fly, or add the property to the 'blacklist' array
              in the snd_xplore Script Include.&lt;/p&gt;

          &lt;/div&gt;
        &lt;/div&gt;
      &lt;/div&gt;

    &lt;/div&gt;&lt;!-- /info_accordion --&gt;
  &lt;/div&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;pre style="font-size:10px; background: transparent; border: none; text-align: center;"&gt;
                                                                77777
                                                                7:::7
                                                                7:::7
                                                                7:::7
  www.sndeveloper.com  777777777777777777           7777777777777:::7
 7::::::::::::::::::7  7:::::::::::::::::77       7:::::::::::::::::7
7::::7777777777777777  7:::777777777777::::7     7::::77777777777:::7
7:::7                  7:::7            7:::7   7:::7           7:::7
7::::77777777777777    7:::7            7:::7  7:::7            7:::7
 7:::::::::::::::::7   7:::7            7:::7  7:::7            7:::7
  77777777777777::::7  7:::7            7:::7  7:::7            7:::7
                7:::7  7:::7            7:::7   7:::7           7:::7
7777777777777777::::7  7:::7            7:::7    7::::77777777777:::7
7::::::::::::::::::7   7:::7            7:::7     7:::::::::::::::::7
7777777777777777777    77777            77777       77777777777777777
  &lt;/pre&gt;
&lt;/div&gt;

&lt;div class="row"&gt;
  &lt;div class="col-xs-12"&gt;
    &lt;p&gt;
      Version: ${snd_xplore.version}. The UI client uses
      &lt;a href="http://getbootstrap.com/" target="_blank"&gt;Bootstrap&lt;/a&gt;,
      &lt;a href="http://jquery.com/" target="_blank"&gt;JQuery&lt;/a&gt;,
      &lt;a href="http://codemirror.net/" target="_blank"&gt;CodeMirror&lt;/a&gt;,
      &lt;a href="http://www.bootstraptoggle.com/"&gt;Bootstrap Toggle&lt;/a&gt;
      and &lt;a href="http://github.com/google/code-prettify"&gt;Google Code-Prettify&lt;/a&gt;.
    &lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/j:jelly&gt;]]&gt;&lt;/xml&gt;&lt;/sys_ui_macro&gt;&lt;/record_update&gt;</payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>cb6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore_info</target_name>
<type>Macro</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
<sys_update_xml action="INSERT_OR_UPDATE">
<action>INSERT_OR_UPDATE</action>
<application display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</application>
<category>customer</category>
<comments/>
<name>sys_ui_script_c9abed770f2a820094f3c09ce1050e7f</name>
<payload><![CDATA[<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_ui_script"><sys_ui_script action="INSERT_OR_UPDATE"><active>true</active><description>The HTML Reporter for the Xplore UI</description><global>false</global><name>snd_xplore_reporter</name><script>var snd_xplore_reporter = (function () {&#13;
&#13;
  var showMoreButton = '&lt;button class="btn btn-xs btn-warning show-more" ' +&#13;
      'data-show-more="false"&gt;Show&lt;/button&gt;';&#13;
&#13;
  function setDescription(table, result) {&#13;
    var type = result.type ? result.type : '[UNKNOWN]';&#13;
    table.empty().&#13;
    append('&lt;tr&gt;&lt;th class="col-md-1"&gt;Type&lt;/th&gt;&lt;td class="col-md-11"&gt;' + type +&#13;
        '&lt;/td&gt;&lt;/tr&gt;');&#13;
    if (!result.string) result.string = "";&#13;
    if (result.string.length &lt; 100) {&#13;
      table.append('&lt;tr&gt;&lt;th class="col-md-1"&gt;String&lt;/th&gt;&lt;td class="col-md-11"&gt;' +&#13;
          showAsString(lineBreaks(escapeHtml(result.string))) + '&lt;/td&gt;&lt;/tr&gt;');&#13;
    } else {&#13;
      table.append('&lt;tr&gt;&lt;th class="col-md-1"&gt;String&lt;/th&gt;&lt;td class="col-md-11"&gt;' +&#13;
          showMoreButton + '&lt;/td&gt;&lt;/tr&gt;');&#13;
      table.append('&lt;tr class="data-more hidden"&gt;&lt;td colspan="2"&gt;' +&#13;
          '&lt;pre class="prettyprint linenums"&gt;' + escapeHtml(result.string) +&#13;
          '&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;');&#13;
    }&#13;
  }&#13;
&#13;
  function setResults(table, result) {&#13;
    table.prepend('&lt;tr&gt;' +&#13;
        '&lt;th class="col-md-3"&gt;Name&lt;/th&gt;' +&#13;
        '&lt;th class="col-md-3"&gt;Type&lt;/th&gt;' +&#13;
        '&lt;th class="col-md-6"&gt;String&lt;/th&gt;&lt;/tr&gt;');&#13;
    $.each(result, function (i, item) {&#13;
      var prop = '&lt;a href="javascript:void(0)" class="interactive"&gt;' + item.name + '&lt;/a&gt;';&#13;
      if (item.type.toLowerCase() === 'function') {&#13;
        prop += ' &lt;a href="javascript:void(0)" class="interactive"&gt;&lt;span class="hidden"&gt;' +&#13;
            item.name + '&lt;/span&gt;()&lt;/a&gt;';&#13;
      }&#13;
      if (!item.string) item.string = "";&#13;
      if (item.string.length &lt; 100 &amp;&amp; (item.type.toLowerCase() != 'function' ||&#13;
          !item.string.length ||&#13;
          item.string.substr(0,8) != 'function')) {&#13;
        table.append('&lt;tr class="data-row"&gt;' +&#13;
          '&lt;td class="col-md-3 prop"&gt;' + prop + '&lt;/td&gt;' +&#13;
          '&lt;td class="col-md-3 type"&gt;' + item.type + '&lt;/td&gt;' +&#13;
          '&lt;td class="classol-md-6 str"&gt;' + showAsString(escapeHtml(item.string)) + '&lt;/td&gt;' +&#13;
        '&lt;/tr&gt;');&#13;
      } else {&#13;
        table.append('&lt;tr class="data-row"&gt;' +&#13;
          '&lt;td class="col-md-3 prop"&gt;' + prop + '&lt;/td&gt;' +&#13;
          '&lt;td class="col-md-3 type"&gt;' + item.type + '&lt;/td&gt;' +&#13;
          '&lt;td class="col-md-6"&gt;' + showMoreButton + '&lt;/td&gt;' +&#13;
        '&lt;/tr&gt;');&#13;
        table.append('&lt;tr class="data-more hidden"&gt;' +&#13;
          '&lt;td colspan="3" class="str"&gt;&lt;pre class="prettyprint linenums"&gt;' + escapeHtml(item.string) + '&lt;/pre&gt;&lt;/td&gt;' +&#13;
        '&lt;/tr&gt;');&#13;
      }&#13;
    });&#13;
  }&#13;
&#13;
  function displayResults(result, options) {&#13;
&#13;
    displayOutputMessages(result.messages, options.html_messages);&#13;
&#13;
    displayLogs(result.logs);&#13;
&#13;
    setDescription($('#description_table'), result);&#13;
&#13;
    var resultTable = $('#results_table');&#13;
    resultTable.empty().append('&lt;tr id="no_props" class="hidden"&gt;&lt;td colspan="3"&gt;' +&#13;
        'No properties to display.&lt;/td&gt;&lt;/tr&gt;');&#13;
&#13;
    result.report.sort(function (a, b) {&#13;
      var ai = parseInt(a.name, 10);&#13;
      var bi = parseInt(b.name, 10);&#13;
      if (ai &gt; bi) return 1;&#13;
      if (bi &gt; ai) return -1;&#13;
      if (a.name &gt; b.name) return 1;&#13;
      if (b.name &gt; a.name) return -1;&#13;
      return 0;&#13;
    });&#13;
&#13;
    if (result.report.length) {&#13;
      setResults(resultTable, result.report);&#13;
    } else {&#13;
      $('#no_props').removeClass('hidden');&#13;
    }&#13;
&#13;
    showTypes();&#13;
&#13;
    $('#result_container').toggleClass('hidden', !(result.type || result.report.length));&#13;
  }&#13;
&#13;
  function displayOutputMessages(messages, asHtml) {&#13;
    var target = $('#message_table'),&#13;
        classMap = {&#13;
          'info': 'info',&#13;
          'error': 'danger',&#13;
          'access': 'warning',&#13;
          'log': 'log',&#13;
          '-1': 'log',&#13;
          '0': 'info',&#13;
          '1': 'warning',&#13;
          '2': 'danger'&#13;
        },&#13;
        temp;&#13;
&#13;
    target.empty();&#13;
    if (!messages) {&#13;
      return;&#13;
    }&#13;
    for (var i = 0, m; i &lt; messages.length; i++) {&#13;
      m = messages[i];&#13;
      temp = m.v.toString();&#13;
      if (!asHtml) {&#13;
        temp = escapeHtml(temp);&#13;
      }&#13;
      target.append('&lt;tr&gt;&lt;td class="' + classMap[m.t] + '"&gt;' +&#13;
          temp.replace('\n', '&lt;br&gt;') + '&lt;/td&gt;&lt;/tr&gt;');&#13;
    }&#13;
    $('#message_container').toggleClass('hidden', !i);&#13;
  }&#13;
&#13;
  function htmlPre(text) {&#13;
    return text.replace(/\n(\s*)/g, function (a, b) {&#13;
      return '&lt;br /&gt;' + new Array(b.length + 1).join('&amp;nbsp;');&#13;
    });&#13;
  }&#13;
&#13;
  function displayLogs(logs) {&#13;
    var table = $('#log_table');&#13;
    var classMap = {&#13;
      'Warning': 'warning',&#13;
      'Error': 'danger'&#13;
    };&#13;
    table.empty();&#13;
    if (!logs) {&#13;
      return;&#13;
    }&#13;
&#13;
    table.prepend('&lt;tr&gt;' +&#13;
      '&lt;th class="col-md-2"&gt;Level&lt;/th&gt;' +&#13;
      '&lt;th class="col-md-2"&gt;Date&lt;/th&gt;' +&#13;
      '&lt;th class="col-md-6"&gt;Value&lt;/th&gt;' +&#13;
      '&lt;th class="col-md-2"&gt;User&lt;/th&gt;&lt;/tr&gt;');&#13;
&#13;
    $.each(logs, function (i, log) {&#13;
      var className = classMap[log.level];&#13;
      table.append('&lt;tr class="data-row text' + className + '"&gt;' +&#13;
          '&lt;td class="col-md-2 ' + className + '"&gt;' + log.level + '&lt;/td&gt;' +&#13;
          '&lt;td class="col-md-2 ' + className + '"&gt;' + log.created + '&lt;/td&gt;' +&#13;
          '&lt;td class="col-md-6 ' + className + '"&gt;' + htmlPre(escapeHtml(log.message)) + '&lt;/td&gt;' +&#13;
          '&lt;td class="col-md-2 ' + className + '"&gt;' + log.source + '&lt;/td&gt;' +&#13;
        '&lt;/tr&gt;');&#13;
    });&#13;
    $('#log_container').toggleClass('hidden', !logs.length);&#13;
  }&#13;
&#13;
  function showTypes() {&#13;
    var target = $('#type_control');&#13;
    var show_types = {};&#13;
    var show_all = false;&#13;
&#13;
    target.empty();&#13;
&#13;
    // find which checkboxes to display&#13;
    $('#results_table tr')&#13;
        .find('td.type')&#13;
        .each(function () {&#13;
          var type = $(this).text();&#13;
          if (typeof display_types[type] === 'undefined') {&#13;
            display_types[type] = true; // default to being checked&#13;
          }&#13;
          show_types[type] = display_types[type];&#13;
          show_all = true;&#13;
        });&#13;
&#13;
    if (show_all) {&#13;
      target.append('&lt;label class="checkbox-inline no_indent"&gt;' +&#13;
        '&lt;input type="checkbox" id="show_all" value="all" checked="checked" /&gt;' +&#13;
        'All&lt;/label&gt;');&#13;
    }&#13;
&#13;
    $.each(show_types, function (type) {&#13;
      id = '' + type.replace(/\./g, '_');&#13;
      target.append('&lt;label class="checkbox-inline no_indent"&gt;' +&#13;
        '&lt;input type="checkbox" id="show_' + id + '" value="' + type + '" /&gt;' +&#13;
        type + '&lt;/label&gt;');&#13;
      $('#show_' + id).prop('checked', display_types[type]);&#13;
    });&#13;
&#13;
    updateResultTypes();&#13;
    updateResults();&#13;
  }&#13;
&#13;
  function updateResultTypes(setAll) {&#13;
    var isShowAllChecked = true;&#13;
    var checkboxes = $('#type_control input[type=checkbox]');&#13;
&#13;
    if (typeof setAll === 'undefined') {&#13;
      checkboxes.each(function (i) {&#13;
        if (!i) return; // ignore show_all at 0&#13;
        display_types[this.value] = this.checked;&#13;
        isShowAllChecked = isShowAllChecked &amp;&amp; this.checked;&#13;
      });&#13;
      $('#show_all').prop('checked', isShowAllChecked);&#13;
    } else {&#13;
      checkboxes.each(function () {&#13;
        $(this).prop('checked', setAll);&#13;
        display_types[this.value] = setAll;&#13;
      });&#13;
    }&#13;
&#13;
    checkboxes.each(function (i) {&#13;
      if (!i) return;&#13;
      $(this).parent().&#13;
        toggleClass('bg-success text-success', display_types[this.value]).&#13;
        toggleClass('bg-danger text-danger', !display_types[this.value]);&#13;
    });&#13;
&#13;
  }&#13;
&#13;
  function updateResults() {&#13;
    var isShowingProps = false;&#13;
    $('#results_table tr.data-row').each(function () {&#13;
&#13;
      $this = $(this);&#13;
      var value = $this.find('td.type').text();&#13;
      $this.toggleClass('hidden', !display_types[value]);&#13;
&#13;
      // show/hide the more info row&#13;
      var next = $this.next();&#13;
      if (next.hasClass('data-more')) {&#13;
        var state = $this.find('button.show-more').attr('data-show-more');&#13;
        next.toggleClass('hidden', !(display_types[value] &amp;&amp; state != 'false'));&#13;
      }&#13;
&#13;
      isShowingProps = isShowingProps || display_types[value];&#13;
    });&#13;
    $('#no_props').toggleClass('hidden', isShowingProps);&#13;
  }&#13;
&#13;
  function showAsString(str) {&#13;
    return '&amp;quot;&lt;span class="text-danger"&gt;' + str + '&lt;/span&gt;&amp;quot;';&#13;
  }&#13;
&#13;
  var escapeHtml = (function () {&#13;
    var entityMap = {&#13;
      "&amp;": "&amp;amp;",&#13;
      "&lt;": "&amp;lt;",&#13;
      "&gt;": "&amp;gt;",&#13;
      '"': '&amp;quot;',&#13;
      "'": '&amp;#39;',&#13;
      "/": '&amp;#x2F;'&#13;
    };&#13;
    return function (string) {&#13;
      return String(string).replace(/[&amp;&lt;&gt;"'\/]/g, function (s) {&#13;
        return entityMap[s];&#13;
      });&#13;
    };&#13;
  })();&#13;
&#13;
  function lineBreaks(text) {&#13;
    return text.toString().trim().replace(/\n/g, '&lt;br /&gt;');&#13;
  }&#13;
&#13;
  var breadcrumbs = [];&#13;
  var display_types = {};&#13;
  var events = {};&#13;
&#13;
  function SndXploreReporter() {&#13;
&#13;
    this.addEvent = function (name, fn) {&#13;
      if (typeof events[name] !== 'object') {&#13;
        events[name] = [];&#13;
      }&#13;
      events[name].push(fn);&#13;
    };&#13;
&#13;
    this.fireEvent = function (name, scope, args) {&#13;
      var eventArr = typeof events[name] === 'object' ? events[name] : null;&#13;
      if (!eventArr) return;&#13;
      for (var i = 0; i &lt; eventArr.length; i++) {&#13;
        if (typeof eventArr[i] === 'function') {&#13;
          eventArr[i].apply(scope || this, args);&#13;
        }&#13;
      }&#13;
    };&#13;
&#13;
    this.initialize = function () {&#13;
&#13;
      var sxr = this;&#13;
&#13;
      $('#results_table,#description_table').on('click', '.show-more', function () {&#13;
        // summary:&#13;
        //   Handle the 'Show...' button click for a result&#13;
&#13;
        var $this = $(this);&#13;
        var target = $this.parents('tr').next();&#13;
        var doHide = $this.attr('data-show-more') != 'false';&#13;
&#13;
        target.toggleClass('hidden', doHide);&#13;
        $this.text(doHide ? 'Show' : 'Hide');&#13;
        $this.toggleClass('active', !doHide);&#13;
        $this.attr('data-show-more', doHide ? 'false' : 'true');&#13;
&#13;
      });&#13;
&#13;
      $('#results_table').on('click', 'a.interactive', function () {&#13;
        // summary:&#13;
        //   Make property names interactive so we can dive into an object&#13;
&#13;
&#13;
        var $breadcrumb = $('ul#breadcrumb');&#13;
        var pos = breadcrumbs.length - 1;&#13;
        var text = $(this).text();&#13;
&#13;
        // make the last breadcrumb active&#13;
        if (breadcrumbs.length) {&#13;
          $breadcrumb.children().remove(':last');&#13;
          $breadcrumb.append('&lt;li&gt;&lt;a href="javascript:void(0)" id="breadcrumb_' +&#13;
              pos + '"&gt;' + breadcrumbs[pos] + '&lt;/a&gt;&lt;/li&gt;');&#13;
        }&#13;
&#13;
        // add the new last breadcrumb&#13;
        $breadcrumb&#13;
            .append('&lt;li&gt;' + text + '&lt;/li&gt;')&#13;
            .removeClass('hidden');&#13;
&#13;
        breadcrumbs.push(text);&#13;
&#13;
        sxr.fireEvent('click.interactive-result', this);&#13;
      });&#13;
&#13;
      $('ul#breadcrumb').on('click', 'a', function () {&#13;
        // summary:&#13;
        //   add the event handler for clicking on a breadcrumb to remove it&#13;
&#13;
        var $breadcrumb = $('ul#breadcrumb');&#13;
&#13;
        // remove unnecessary breadcrumb elements&#13;
        var pos = parseInt(this.id.split('_')[1], 10);&#13;
        var removeCount = breadcrumbs.length - 1 - pos;&#13;
        if (removeCount) {&#13;
&#13;
          // remove all the nodes, including this one&#13;
          $breadcrumb&#13;
            .find('li:nth-last-child(-n+' + (removeCount + 1) + '):not(.permanent)')&#13;
            .remove();&#13;
&#13;
          // update the breadcrumb array&#13;
          breadcrumbs = breadcrumbs.&#13;
              slice(0, $breadcrumb.children(':not(.permanent)').size() + 1);&#13;
&#13;
          // re-add this node as a non-anchored breadcrumb&#13;
          if (breadcrumbs.length) {&#13;
            $breadcrumb.append('&lt;li&gt;' + breadcrumbs[breadcrumbs.length - 1] + '&lt;/li&gt;');&#13;
          }&#13;
&#13;
          $breadcrumb.toggleClass('hidden', !breadcrumbs.length);&#13;
          sxr.fireEvent('click.breadcrumb', this);&#13;
        }&#13;
      });&#13;
&#13;
      $('#type_control').on('change', 'input[type=checkbox]', function () {&#13;
        // summary:&#13;
        //   restrict the results based on the type checkboxes that are checked&#13;
&#13;
        if (this.id == 'show_all') {&#13;
          updateResultTypes(this.checked);&#13;
        } else {&#13;
          updateResultTypes();&#13;
        }&#13;
&#13;
        updateResults();&#13;
      });&#13;
    };&#13;
&#13;
    this.start = function (params) {&#13;
      this.options = params;&#13;
      this.fireEvent('start', null, [params]);&#13;
    };&#13;
&#13;
    this.done = function (result) {&#13;
      var target = $('#results');&#13;
      target.empty();&#13;
      displayResults(result, this.options);&#13;
      this.fireEvent('done', null, [result]);&#13;
    };&#13;
&#13;
    this.getBreadcrumb = function () {&#13;
      return breadcrumbs.join('.');&#13;
    };&#13;
&#13;
    this.clearBreadcrumb = function () {&#13;
      breadcrumbs.length = 0;&#13;
      $('ul#breadcrumb').addClass('hidden').find('li:not(.permanent)').remove();&#13;
    };&#13;
&#13;
  }&#13;
&#13;
  return new SndXploreReporter();&#13;
}());&#13;
</script><script_name/><sys_class_name>sys_ui_script</sys_class_name><sys_created_by>james@snd</sys_created_by><sys_created_on>2015-09-23 23:34:14</sys_created_on><sys_customer_update>true</sys_customer_update><sys_id>c9abed770f2a820094f3c09ce1050e7f</sys_id><sys_mod_count>120</sys_mod_count><sys_name>snd_xplore_reporter</sys_name><sys_package display_value="Global" source="global">global</sys_package><sys_policy/><sys_replace_on_upgrade>false</sys_replace_on_upgrade><sys_scope display_value="Xplore">0f6ab99a0f36060094f3c09ce1050ee8</sys_scope><sys_update_name>sys_ui_script_c9abed770f2a820094f3c09ce1050e7f</sys_update_name><sys_updated_by>james@sndeveloper.com</sys_updated_by><sys_updated_on>2016-03-15 11:36:54</sys_updated_on><use_scoped_format>false</use_scoped_format></sys_ui_script></record_update>]]></payload>
<remote_update_set display_value="Xplore - 3.6">836cf8e70f4b1a0094f3c09ce1050e14</remote_update_set>
<replace_on_upgrade>false</replace_on_upgrade>
<sys_created_by>james@sndeveloper.com</sys_created_by>
<sys_created_on>2016-05-03 18:11:29</sys_created_on>
<sys_id>cf6cf8e70f4b1a0094f3c09ce1050e14</sys_id>
<sys_mod_count>0</sys_mod_count>
<sys_updated_by>james@sndeveloper.com</sys_updated_by>
<sys_updated_on>2016-05-03 18:11:29</sys_updated_on>
<table/>
<target_name>snd_xplore_reporter</target_name>
<type>UI Script</type>
<update_domain>global                          </update_domain>
<update_set display_value=""/>
<view/>
</sys_update_xml>
</unload>
